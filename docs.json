[
  {
    "description": "",
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "IdleTimer"
      }
    ],
    "loc": {
      "start": {
        "line": 2,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 84,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "IdleTimer",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of IdleTimer."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "memberof",
          "description": "IdleTimer",
          "lineNumber": 2
        }
      ],
      "loc": {
        "start": {
          "line": 8,
          "column": 2
        },
        "end": {
          "line": 11,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 14,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000129!/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js 00000012",
        "code": "{\n  /**\n   * Creates an instance of IdleTimer.\n   * @memberof IdleTimer\n   */\n  constructor() {\n    this.listeners = [];\n  }\n\n  /**\n   * @param  {Number} time time in milliseconds\n   * @return {void}@memberof IdleTimer\n   */\n  start(time = 15000) {\n    if (!time) {\n      Debugger.log('warn', '[IdleTimer.start()] must specify a time!');\n      return;\n    }\n\n    this.length = time;\n    this.timer = setTimeout(this.dispatch.bind(this), time);\n  }\n\n  /**\n   * resets the timer, does not call subscribed functions\n   * @return {void}@memberof IdleTimer\n   */\n  reset() {\n    if (!this.timer) {\n      Debugger.log('warn', '[IdleTimer.reset()] timer has not been started');\n      return;\n    }\n\n    clearTimeout(this.timer);\n    this.timer = setTimeout(this.dispatch.bind(this), this.length);\n  }\n\n  /**\n   * @return {void}@memberof IdleTimer\n   */\n  stop() {\n    if (!this.timer) {\n      Debugger.log('warn', '[IdleTimer.reset()] timer has not been started');\n      return;\n    }\n    clearTimeout(this.timer);\n    this.timer = null;\n  }\n\n  /**\n   * Calls all subscribed functions, and resets the timer.\n   * @return {void}@memberof IdleTimer\n   */\n  dispatch() {\n    for (let i = 0; i < this.listeners.length; i++) {\n      this.listeners[i]();\n    }\n    this.reset();\n  }\n\n  /**\n   * Adds a function to be called when timer is dispatched\n   * @param  {Function()} callback\n   * @return {void}@memberof IdleTimer\n   */\n  subscribe(callback) {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * Removes a function from being called when timer is dispatched\n   * @param  {any} callback\n   * @return {void}@memberof IdleTimer\n   */\n  unsubscribe(callback) {\n    this.listeners = this.listeners.filter(listener => listener !== callback);\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "IdleTimer"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": "time in milliseconds",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "time"
            },
            {
              "title": "return",
              "description": "@memberof IdleTimer",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 20,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "time",
              "lineNumber": 1,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "time in milliseconds"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "default": "15000"
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof IdleTimer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "start",
          "kind": "function",
          "memberof": "IdleTimer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "IdleTimer",
              "kind": "class"
            },
            {
              "name": "start",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "IdleTimer#start"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "resets the timer, does not call subscribed functions"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "return",
              "description": "@memberof IdleTimer",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 30,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof IdleTimer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "reset",
          "kind": "function",
          "memberof": "IdleTimer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "IdleTimer",
              "kind": "class"
            },
            {
              "name": "reset",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "IdleTimer#reset"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "return",
              "description": "@memberof IdleTimer",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 47,
                "column": 2
              },
              "end": {
                "line": 54,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof IdleTimer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "stop",
          "kind": "function",
          "memberof": "IdleTimer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "IdleTimer",
              "kind": "class"
            },
            {
              "name": "stop",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "IdleTimer#stop"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Calls all subscribed functions, and resets the timer."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "return",
              "description": "@memberof IdleTimer",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 60,
                "column": 2
              },
              "end": {
                "line": 65,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof IdleTimer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "dispatch",
          "kind": "function",
          "memberof": "IdleTimer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "IdleTimer",
              "kind": "class"
            },
            {
              "name": "dispatch",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "IdleTimer#dispatch"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a function to be called when timer is dispatched"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": null,
              "errors": [
                "not reach to EOF"
              ],
              "name": "callback"
            },
            {
              "title": "return",
              "description": "@memberof IdleTimer",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 72,
                "column": 2
              },
              "end": {
                "line": 74,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 72
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof IdleTimer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "subscribe",
          "kind": "function",
          "memberof": "IdleTimer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "IdleTimer",
              "kind": "class"
            },
            {
              "name": "subscribe",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "IdleTimer#subscribe"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Removes a function from being called when timer is dispatched"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "callback"
            },
            {
              "title": "return",
              "description": "@memberof IdleTimer",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 81,
                "column": 2
              },
              "end": {
                "line": 83,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IdleTimer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "any"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof IdleTimer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "unsubscribe",
          "kind": "function",
          "memberof": "IdleTimer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "IdleTimer",
              "kind": "class"
            },
            {
              "name": "unsubscribe",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "IdleTimer#unsubscribe"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "IdleTimer",
        "kind": "class"
      }
    ],
    "namespace": "IdleTimer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Hint Player interface to help enforce minimum requirements for hint players"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "interface",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "IHintPlayer"
      },
      {
        "title": "property",
        "description": "called by application to",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "play"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IHintPlayer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "play",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "called by application to"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "IHintPlayer",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of IHintPlayer."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "memberof",
          "description": "IHintPlayer",
          "lineNumber": 2
        }
      ],
      "loc": {
        "start": {
          "line": 8,
          "column": 2
        },
        "end": {
          "line": 11,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 18,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IHintPlayer.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000129!/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/index.js:00000001!/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/IHintPlayer.js 00000012",
        "code": "{\n  /**\n   * Creates an instance of IHintPlayer.\n   * @memberof IHintPlayer\n   */\n  constructor() {\n    if ('function' !== typeof this.play) {\n      console.error(\n        'Springroll Hint Player not implemented correctly. Please ensure you have a \"play\" function in your class.'\n      );\n    }\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "IHintPlayer"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "IHintPlayer",
        "kind": "class"
      }
    ],
    "namespace": "IHintPlayer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Manages data between SpringRoll Container and SpringRoll"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "UserData"
      }
    ],
    "loc": {
      "start": {
        "line": 15,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 232,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "UserData",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Gets data from SpringRoll Container"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "UserData",
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "return",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 72,
                "column": 2
              },
              "end": {
                "line": 82,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "UserData",
          "scope": "static",
          "name": "read",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "read",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.read"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sends data to SpringRoll Container"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "UserData",
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "AllLiteral"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 92,
                "column": 2
              },
              "end": {
                "line": 97,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "value",
              "lineNumber": 3,
              "type": {
                "type": "AllLiteral"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "UserData",
          "scope": "static",
          "name": "write",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "write",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.write"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Removes data from SpringRoll Container"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "UserData",
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 105,
                "column": 2
              },
              "end": {
                "line": 112,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "UserData",
          "scope": "static",
          "name": "delete",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "delete",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.delete"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Opens a connection with the indexedDB database"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "UserData",
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 121,
                "column": 2
              },
              "end": {
                "line": 133,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "dbName",
              "lineNumber": 121
            },
            {
              "title": "param",
              "name": "dbVersion",
              "lineNumber": 121,
              "default": "null"
            },
            {
              "title": "param",
              "name": "additions",
              "lineNumber": 121,
              "default": "{}"
            },
            {
              "title": "param",
              "name": "deletions",
              "lineNumber": 121,
              "default": "{}"
            },
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "UserData",
          "scope": "static",
          "name": "IDBOpen",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBOpen",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBOpen"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a record to the indexedDB database"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "UserData",
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 141,
                "column": 2
              },
              "end": {
                "line": 148,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "storeName",
              "lineNumber": 141
            },
            {
              "title": "param",
              "name": "value",
              "lineNumber": 141
            },
            {
              "title": "param",
              "name": "key",
              "lineNumber": 141,
              "default": "null"
            },
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "UserData",
          "scope": "static",
          "name": "IDBAdd",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBAdd",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBAdd"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Removes data from SpringRoll Container"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "UserData",
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 150,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 156,
                "column": 2
              },
              "end": {
                "line": 163,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "storeName",
              "lineNumber": 156
            },
            {
              "title": "param",
              "name": "key",
              "lineNumber": 156
            },
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "UserData",
          "scope": "static",
          "name": "IDBRemove",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBRemove",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBRemove"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Removes data from SpringRoll Container"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "UserData",
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 170,
                "column": 2
              },
              "end": {
                "line": 177,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "storeName",
              "lineNumber": 170
            },
            {
              "title": "param",
              "name": "key",
              "lineNumber": 170
            },
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "UserData",
          "scope": "static",
          "name": "IDBRead",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBRead",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBRead"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "storeName"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "key"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "object"
            }
          ],
          "loc": {
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 184,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 185,
                "column": 2
              },
              "end": {
                "line": 192,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "storeName",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "key",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "value",
              "lineNumber": 185
            },
            {
              "title": "param",
              "name": "object",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "IDBUpdate",
          "kind": "function",
          "memberof": "UserData",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBUpdate",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBUpdate"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": "The name of the store to read from",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "storeName"
            },
            {
              "title": "param",
              "description": "Specifies the number of values to return if more than one is found.",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "integer"
              },
              "name": "count"
            }
          ],
          "loc": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 200,
                "column": 2
              },
              "end": {
                "line": 207,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "storeName",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The name of the store to read from"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "count",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Specifies the number of values to return if more than one is found."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "integer"
              },
              "default": "null"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "IDBReadAll",
          "kind": "function",
          "memberof": "UserData",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBReadAll",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBReadAll"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Close the connection with the database"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 212,
                "column": 2
              },
              "end": {
                "line": 219,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "IDBClose",
          "kind": "function",
          "memberof": "UserData",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBClose",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBClose"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Delete a given database"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The name of the database to be deleted",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "DBName"
            }
          ],
          "loc": {
            "start": {
              "line": 220,
              "column": 2
            },
            "end": {
              "line": 223,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 224,
                "column": 2
              },
              "end": {
                "line": 231,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/UserData.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "dbName",
              "lineNumber": 224
            },
            {
              "title": "param",
              "name": "DBName",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The name of the database to be deleted"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "IDBDeleteDB",
          "kind": "function",
          "memberof": "UserData",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "UserData",
              "kind": "class"
            },
            {
              "name": "IDBDeleteDB",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "UserData.IDBDeleteDB"
        }
      ]
    },
    "path": [
      {
        "name": "UserData",
        "kind": "class"
      }
    ],
    "namespace": "UserData"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": {
          "type": "RecordType",
          "fields": [
            {
              "type": "FieldType",
              "key": "x",
              "value": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "type": "FieldType",
              "key": "y",
              "value": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ]
        },
        "name": "Point"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/Anchor.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "Point",
    "type": {
      "type": "RecordType",
      "fields": [
        {
          "type": "FieldType",
          "key": "x",
          "value": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "type": "FieldType",
          "key": "y",
          "value": {
            "type": "NameExpression",
            "name": "Number"
          }
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Point",
        "kind": "typedef"
      }
    ],
    "namespace": "Point"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": null,
        "errors": [
          "not reach to EOF"
        ],
        "name": "ScaledEntity"
      },
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "errors": [
          "not reach to EOF"
        ],
        "name": "EntityResizeEvent"
      },
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "RecordType",
          "fields": [
            {
              "type": "FieldType",
              "key": "x",
              "value": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "type": "FieldType",
              "key": "y",
              "value": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ]
        },
        "name": "Point"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "Point",
    "type": {
      "type": "RecordType",
      "fields": [
        {
          "type": "FieldType",
          "key": "x",
          "value": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "type": "FieldType",
          "key": "y",
          "value": {
            "type": "NameExpression",
            "name": "Number"
          }
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Point",
        "kind": "typedef"
      }
    ],
    "namespace": "Point"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "callback to used move game entities"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "callback",
        "description": "PositionCallback",
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": "position relative to anchor direction",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Point"
        },
        "name": "position"
      }
    ],
    "loc": {
      "start": {
        "line": 8,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/Anchor.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "position",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "position relative to anchor direction"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Point"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "PositionCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "PositionCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "PositionCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Used to fix positions to a relative point in the viewport."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "Anchor"
      },
      {
        "title": "implements",
        "description": "ScaledEntity",
        "lineNumber": 4,
        "type": null,
        "errors": [
          "Missing or invalid tag type"
        ]
      }
    ],
    "loc": {
      "start": {
        "line": 14,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/Anchor.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Anchor",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of Anchor."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": null,
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "param"
        },
        {
          "title": "param",
          "description": null,
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "Point"
          },
          "name": "param.position"
        },
        {
          "title": "param",
          "description": null,
          "lineNumber": 4,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "Point"
            }
          },
          "name": "param.direction",
          "default": "{x:-1,y:-1}"
        },
        {
          "title": "param",
          "description": null,
          "lineNumber": 5,
          "type": {
            "type": "NameExpression",
            "name": "PositionCallback"
          },
          "name": "param.callback"
        },
        {
          "title": "memberof",
          "description": "Anchor",
          "lineNumber": 6
        }
      ],
      "loc": {
        "start": {
          "line": 21,
          "column": 2
        },
        "end": {
          "line": 28,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 29,
            "column": 2
          },
          "end": {
            "line": 38,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/Anchor.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000131!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/Anchor.js 00000029",
        "code": "{\n  /**\n   * Creates an instance of Anchor.\n   * @param  {object} param\n   * @param  {Point} param.position\n   * @param  {Point} [param.direction= {x: -1, y: -1}]\n   * @param  {PositionCallback} param.callback\n   * @memberof Anchor\n   */\n  constructor({\n    position,\n    direction,\n    callback = () => Debugger.log('warn', this, 'Anchor missing callback')\n  } = {}) {\n    super();\n    this.position = position || { x: 0, y: 0 };\n    this.direction = direction || { x: -1, y: -1 };\n    this.callback = callback;\n  }\n\n  /**\n   * @param  {object} param\n   * @param  {Point}  param.viewArea\n   * @return {void} @memberof Anchor\n   */\n  onResize({ viewArea }) {\n    const halfWidth = viewArea.width * 0.5;\n    const halfHeight = viewArea.height * 0.5;\n\n    const centerX = viewArea.x + halfWidth;\n    const centerY = viewArea.y + halfHeight;\n\n    const x = centerX + (this.direction.x * halfWidth) + this.position.x;\n    const y = centerY + (this.direction.y * halfHeight) + this.position.y;\n\n    this.callback({ x, y });\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "param",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        {
          "title": "param",
          "name": "param.position",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "Point"
          }
        },
        {
          "title": "param",
          "name": "param.direction",
          "lineNumber": 4,
          "type": {
            "type": "NameExpression",
            "name": "Point"
          },
          "default": "{x:-1,y:-1}"
        },
        {
          "title": "param",
          "name": "param.callback",
          "lineNumber": 5,
          "type": {
            "type": "NameExpression",
            "name": "PositionCallback"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "Anchor"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "param"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Point"
              },
              "name": "param.viewArea"
            },
            {
              "title": "return",
              "description": "@memberof Anchor",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 40,
              "column": 2
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 45,
                "column": 2
              },
              "end": {
                "line": 56,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/Anchor.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "param",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "properties": [
                {
                  "title": "param",
                  "name": "param.viewArea",
                  "lineNumber": 2,
                  "type": {
                    "type": "NameExpression",
                    "name": "Point"
                  }
                }
              ]
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof Anchor"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "onResize",
          "kind": "function",
          "memberof": "Anchor",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Anchor",
              "kind": "class"
            },
            {
              "name": "onResize",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Anchor#onResize"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Anchor",
        "kind": "class"
      }
    ],
    "namespace": "Anchor"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "callback to used scale game and canvas"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "callback",
        "description": "ScaleCallback",
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": "width canvas should be",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": "height canvas should be",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "height"
      },
      {
        "title": "param",
        "description": "x/y scale values",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Point"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "minimum aspect ratio that fit's in the screen.",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "scaleRatio"
      },
      {
        "title": "param",
        "description": "Rectangle defining the total viewable area of game content.",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "viewArea"
      }
    ],
    "loc": {
      "start": {
        "line": 10,
        "column": 0
      },
      "end": {
        "line": 18,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "width",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "width canvas should be"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "title": "param",
        "name": "height",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "height canvas should be"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "title": "param",
        "name": "scale",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "x/y scale values"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Point"
        }
      },
      {
        "title": "param",
        "name": "scaleRatio",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "minimum aspect ratio that fit's in the screen."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "title": "param",
        "name": "viewArea",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Rectangle defining the total viewable area of game content."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "ScaleCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "ScaleCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "ScaleCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Handles scaling the game"
            }
          ]
        }
      ]
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 20,
        "column": 0
      },
      "end": {
        "line": 22,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "$0",
        "anonymous": true,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "properties": [
          {
            "title": "param",
            "name": "$0.width",
            "lineNumber": 35
          },
          {
            "title": "param",
            "name": "$0.height",
            "lineNumber": 36
          },
          {
            "title": "param",
            "name": "$0.safeWidth",
            "lineNumber": 37,
            "default": "Infinity"
          },
          {
            "title": "param",
            "name": "$0.safeHeight",
            "lineNumber": 38,
            "default": "Infinity"
          },
          {
            "title": "param",
            "name": "$0.callback",
            "lineNumber": 39,
            "default": "()=>{}"
          }
        ]
      },
      {
        "title": "param",
        "name": "param",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of SafeScaleManager."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": null,
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "param"
        },
        {
          "title": "param",
          "description": "width of game",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "Number"
          },
          "name": "param.width"
        },
        {
          "title": "param",
          "description": "height of game",
          "lineNumber": 4,
          "type": {
            "type": "NameExpression",
            "name": "Number"
          },
          "name": "param.height"
        },
        {
          "title": "param",
          "description": "width of safe area for the game",
          "lineNumber": 5,
          "type": {
            "type": "NameExpression",
            "name": "Number"
          },
          "name": "param.safeWidth"
        },
        {
          "title": "param",
          "description": "height of safe area for the game",
          "lineNumber": 6,
          "type": {
            "type": "NameExpression",
            "name": "Number"
          },
          "name": "param.safeHeight"
        },
        {
          "title": "param",
          "description": "function called to scale game and canvas",
          "lineNumber": 7,
          "type": {
            "type": "NameExpression",
            "name": "ScaleCallback"
          },
          "name": "param.callback"
        },
        {
          "title": "memberof",
          "description": "SafeScaleManager",
          "lineNumber": 8
        }
      ],
      "loc": {
        "start": {
          "line": 24,
          "column": 2
        },
        "end": {
          "line": 33,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 34,
            "column": 2
          },
          "end": {
            "line": 69,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000131!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/index.js:00000001!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js 00000034",
        "code": "{\n  /**\n   * Creates an instance of SafeScaleManager.\n   * @param  {object} param\n   * @param  {Number} param.width width of game\n   * @param  {Number} param.height height of game\n   * @param  {Number} param.safeWidth width of safe area for the game\n   * @param  {Number} param.safeHeight height of safe area for the game\n   * @param  {ScaleCallback} param.callback function called to scale game and canvas\n   * @memberof SafeScaleManager\n   */\n  constructor({\n    width,\n    height,\n    safeWidth = Infinity,\n    safeHeight = Infinity,\n    callback = () => {}\n  }) {\n    this.gameWidth = width;\n    this.gameHeight = height;\n    this.safeWidth = safeWidth <= width ? safeWidth : width;\n    this.safeHeight = safeHeight <= height ? safeHeight : height;\n    this.callback = callback;\n    this.scaleRatio = 1;\n\n    // Rectangle containing the total viewable game content.\n    this.viewArea = { \n      x: 0, \n      y: 0, \n      width: 0, \n      height: 0, \n      left: 0, \n      right: 0, \n      top: 0, \n      bottom: 0 \n    };\n\n    /** @type {ScaledEntity[]} */\n    this.entities = [];\n\n    /** @private */\n    this.resizer = new ResizeHelper(this.onResize.bind(this));\n\n    if (callback instanceof Function) {\n      this.enable(callback);\n    }\n  }\n\n  /**\n   * onResize maps and passes the relevant data to the user provided callback function.\n   * @param {object} param\n   * @param {number} param.width - Current window width\n   * @param {number} param.height - Current window height\n   * @private\n   */\n  onResize({ width, height }) {\n    // Calculate the scaling ratio.\n    this.scaleRatio = Math.min(width / this.safeWidth, height / this.safeHeight);\n\n    const nWidth = Math.max(0, Math.min(this.gameWidth * this.scaleRatio, width));\n    const nHeight = Math.max(0, Math.min(this.gameHeight * this.scaleRatio, height));\n\n    const scale = {\n      x: (this.gameWidth / nWidth) * this.scaleRatio,\n      y: (this.gameHeight / nHeight) * this.scaleRatio\n    };\n\n    const scaledWidth = width / this.scaleRatio;\n    const scaledHeight = height / this.scaleRatio;\n\n    this.viewArea.left = Math.max(-(scaledWidth - this.gameWidth) * 0.5, 0);\n    this.viewArea.top = Math.max(-(scaledHeight - this.gameHeight) * 0.5, 0);\n    this.viewArea.right = Math.min(this.viewArea.left + scaledWidth, this.gameWidth);\n    this.viewArea.bottom = Math.min(this.viewArea.top + scaledHeight, this.gameHeight);\n    \n    this.viewArea.x = this.viewArea.left;\n    this.viewArea.y = this.viewArea.top;\n    this.viewArea.width = this.viewArea.right - this.viewArea.left;\n    this.viewArea.height = this.viewArea.bottom - this.viewArea.top;\n\n    /** @type {EntityResizeEvent} */\n    this.resizeEventData = Object.freeze({\n      offset: { x: this.viewArea.x, y: this.viewArea.y },\n      gameSize:{ x: this.gameWidth, y: this.gameHeight },\n      viewArea: this.viewArea,\n      scale\n    });\n    \n    this.callback({ \n      width: nWidth, \n      height: nHeight, \n      scaleRatio: this.scaleRatio,\n      viewArea: this.viewArea,\n      scale\n    });\n\n    for (let i = 0, length = this.entities.length; i < length; i++) {\n      const entity = this.entities[i];\n      entity.onResize(this.resizeEventData);\n    }\n  }\n\n  /**\n   * Calculates the offset for anchors.\n   * @param  {Point} scale scale value\n   * @return {Point}\n   * @memberof SafeScaleManager\n   */\n  calcOffset(scale) {\n    const gameWidthRatio = this.gameWidth / this.safeWidth;\n    const gameHeightRatio = this.gameHeight / this.safeHeight;\n\n    let deltaX = (scale.x - 1) / (gameWidthRatio - 1);\n    let deltaY = (scale.y - 1) / (gameHeightRatio - 1);\n\n    //FIXES: NaN / infinite Bug from 0 / 0;\n    deltaX = Number.isFinite(deltaX) ? deltaX : 0;\n    deltaY = Number.isFinite(deltaY) ? deltaY : 0;\n\n    const x = (this.gameWidth - this.safeWidth) * deltaX * 0.5;\n    const y = (this.gameHeight - this.safeHeight) * deltaY * 0.5;\n\n    return { x, y };\n  }\n\n  /**\n   * Adds and anchor to be updated during resize\n   * @param  {ScaledEntity | ScaledEntity[]} entity\n   * @memberof SafeScaleManager\n   */\n  addEntity(entity) {\n    if (!Array.isArray(entity)) {\n      entity = [entity];      \n    }\n\n    entity.forEach(e => {\n      if (this.entities.includes(e)) {\n        return;\n      }\n  \n      if (this.resizeEventData) {\n        e.onResize(this.resizeEventData);\n      }\n  \n      this.entities.push(e);\n    });\n  }\n\n  /**\n   * Removes an anchor\n   * @param  {ScaledEntity} entity\n   * @return {void} @memberof SafeScaleManager\n   */\n  removeEntity(entity) {\n    this.entities = this.entities.filter(e => e !== entity);\n  }\n\n  /**\n   * Enables the scale manager listener. Will not be enabled if a callback is not supplied.\n   * @param {ScaleCallback} callback The function to be called on resize events.\n   */\n  enable(callback) {\n    if (callback instanceof Function) {\n      this.callback = callback;\n      this.resizer.enabled = true;\n    } else {\n      Debugger.warn('Scale Manager was not passed a function');\n    }\n  }\n  /**\n   * Disables the scale manager.\n   */\n  disable() {\n    this.resizer.enabled = false;\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "param",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        {
          "title": "param",
          "name": "param.width",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "width of game"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "title": "param",
          "name": "param.height",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "height of game"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "title": "param",
          "name": "param.safeWidth",
          "lineNumber": 5,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "width of safe area for the game"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "title": "param",
          "name": "param.safeHeight",
          "lineNumber": 6,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "height of safe area for the game"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "title": "param",
          "name": "param.callback",
          "lineNumber": 7,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "function called to scale game and canvas"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "ScaleCallback"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "SafeScaleManager"
    },
    "name": "SafeScaleManager",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": "",
          "tags": [
            {
              "title": "type",
              "description": null,
              "lineNumber": 0,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "ScaledEntity"
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 33
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 61,
                "column": 4
              },
              "end": {
                "line": 61,
                "column": 23
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "type": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "ScaledEntity"
              }
            ]
          },
          "name": "entities",
          "memberof": "SafeScaleManager",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SafeScaleManager",
              "kind": "class"
            },
            {
              "name": "entities",
              "scope": "instance"
            }
          ],
          "namespace": "SafeScaleManager#entities"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "type",
              "description": null,
              "lineNumber": 0,
              "type": {
                "type": "NameExpression",
                "name": "EntityResizeEvent"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 36
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 104,
                "column": 4
              },
              "end": {
                "line": 109,
                "column": 7
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "type": {
            "type": "NameExpression",
            "name": "EntityResizeEvent"
          },
          "name": "resizeEventData",
          "memberof": "SafeScaleManager",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SafeScaleManager",
              "kind": "class"
            },
            {
              "name": "resizeEventData",
              "scope": "instance"
            }
          ],
          "namespace": "SafeScaleManager#resizeEventData"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Removes an anchor"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "ScaledEntity"
              },
              "name": "entity"
            },
            {
              "title": "return",
              "description": "@memberof SafeScaleManager",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 171,
              "column": 2
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 176,
                "column": 2
              },
              "end": {
                "line": 178,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "entity",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "ScaledEntity"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof SafeScaleManager"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "removeEntity",
          "kind": "function",
          "memberof": "SafeScaleManager",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SafeScaleManager",
              "kind": "class"
            },
            {
              "name": "removeEntity",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SafeScaleManager#removeEntity"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Enables the scale manager listener. Will not be enabled if a callback is not supplied."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The function to be called on resize events.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "ScaleCallback"
              },
              "name": "callback"
            }
          ],
          "loc": {
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 184,
                "column": 2
              },
              "end": {
                "line": 191,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The function to be called on resize events."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "ScaleCallback"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "enable",
          "kind": "function",
          "memberof": "SafeScaleManager",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SafeScaleManager",
              "kind": "class"
            },
            {
              "name": "enable",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SafeScaleManager#enable"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Disables the scale manager."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 195,
                "column": 2
              },
              "end": {
                "line": 197,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "disable",
          "kind": "function",
          "memberof": "SafeScaleManager",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SafeScaleManager",
              "kind": "class"
            },
            {
              "name": "disable",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SafeScaleManager#disable"
        }
      ],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Calculates the offset for anchors."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "scale value",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Point"
              },
              "name": "scale"
            },
            {
              "title": "return",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Point"
              }
            },
            {
              "title": "memberof",
              "description": "SafeScaleManager",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 125,
              "column": 2
            },
            "end": {
              "line": 130,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 131,
                "column": 2
              },
              "end": {
                "line": 146,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "scale",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "scale value"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Point"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Point"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "SafeScaleManager",
          "name": "calcOffset",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SafeScaleManager",
              "kind": "class"
            },
            {
              "name": "calcOffset",
              "kind": "function"
            }
          ],
          "namespace": "SafeScaleManagercalcOffset"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds and anchor to be updated during resize"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "ScaledEntity"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "ScaledEntity"
                      }
                    ]
                  }
                ]
              },
              "name": "entity"
            },
            {
              "title": "memberof",
              "description": "SafeScaleManager",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 148,
              "column": 2
            },
            "end": {
              "line": 152,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 153,
                "column": 2
              },
              "end": {
                "line": 169,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/SafeScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "entity",
              "lineNumber": 2,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "ScaledEntity"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "ScaledEntity"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "SafeScaleManager",
          "name": "addEntity",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SafeScaleManager",
              "kind": "class"
            },
            {
              "name": "addEntity",
              "kind": "function"
            }
          ],
          "namespace": "SafeScaleManageraddEntity"
        }
      ]
    },
    "path": [
      {
        "name": "SafeScaleManager",
        "kind": "class"
      }
    ],
    "namespace": "SafeScaleManager"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": {
          "type": "RecordType",
          "fields": [
            {
              "type": "FieldType",
              "key": "x",
              "value": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "type": "FieldType",
              "key": "y",
              "value": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ]
        },
        "name": "Point"
      },
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "RecordType",
          "fields": [
            {
              "type": "FieldType",
              "key": "offset",
              "value": {
                "type": "NameExpression",
                "name": "Point"
              }
            },
            {
              "type": "FieldType",
              "key": "gameSize",
              "value": {
                "type": "NameExpression",
                "name": "Point"
              }
            },
            {
              "type": "FieldType",
              "key": "scale",
              "value": {
                "type": "NameExpression",
                "name": "Point"
              }
            }
          ]
        },
        "name": "EntityResizeEvent"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaledEntity.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "EntityResizeEvent",
    "type": {
      "type": "RecordType",
      "fields": [
        {
          "type": "FieldType",
          "key": "offset",
          "value": {
            "type": "NameExpression",
            "name": "Point"
          }
        },
        {
          "type": "FieldType",
          "key": "gameSize",
          "value": {
            "type": "NameExpression",
            "name": "Point"
          }
        },
        {
          "type": "FieldType",
          "key": "scale",
          "value": {
            "type": "NameExpression",
            "name": "Point"
          }
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "EntityResizeEvent",
        "kind": "typedef"
      }
    ],
    "namespace": "EntityResizeEvent"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 1
      },
      {
        "title": "interface",
        "description": "ScaledEntity",
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaledEntity.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "interface",
    "name": "ScaledEntity",
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "EntityResizeEvent"
              },
              "name": "event"
            },
            {
              "title": "return",
              "description": "@memberof ScaledEntity",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaledEntity.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "event",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "EntityResizeEvent"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof ScaledEntity"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "onResize",
          "kind": "function",
          "memberof": "ScaledEntity",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ScaledEntity",
              "kind": "interface"
            },
            {
              "name": "onResize",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "ScaledEntity#onResize"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "ScaledEntity",
        "kind": "interface"
      }
    ],
    "namespace": "ScaledEntity"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "[Deprecated]"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Simplifies listening to resize events by passing the relevant data to a provided callback."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "ScaleManager"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Function"
          }
        },
        "name": "callback",
        "default": "undefined"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Function"
          }
        },
        "name": "callback",
        "default": "undefined"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 64,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaleManager.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "callback",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "default": "undefined"
      }
    ],
    "properties": [
      {
        "title": "property",
        "name": "callback",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Function"
          }
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "ScaleManager",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of ScaleManager."
              }
            ]
          }
        ]
      },
      "tags": [],
      "loc": {
        "start": {
          "line": 12,
          "column": 2
        },
        "end": {
          "line": 14,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 15,
            "column": 2
          },
          "end": {
            "line": 28,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaleManager.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000131!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/index.js:00000003!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaleManager.js 00000015",
        "code": "{\n  /**\n   *Creates an instance of ScaleManager.\n   */\n  constructor(callback = () => {}) {\n    console.warn('SpringRoll.ScaleManager has been deprecated. Use SpringRoll.SafeScaleManager instead.');\n\n    this.width = 1;\n    this.height = 1;\n    this.callback = callback;\n\n    /** @private */\n    this.resizer = new ResizeHelper(this.onResize.bind(this));\n\n    if (callback instanceof Function) {\n      this.enable(callback);\n    }\n  }\n\n  /**\n   * onResize maps and passes the relevant data to the user provided callback function.\n   * @param {object} param\n   * @param {number} param.width - Current window width\n   * @param {number} param.height - Current window height\n   * @private\n   */\n  onResize({ width, height }) {\n    this.width = width;\n    this.height = height;\n\n    const ratio = width / height;\n    this.callback({ width, height, ratio });\n  }\n\n  /**\n   * Enables the scale manager listener. Will not be enabled if a callback is not supplied.\n   * @param {Function} callback The function to be called on resize events.\n   */\n  enable(callback) {\n    if (callback instanceof Function) {\n      this.callback = callback;\n      this.resizer.enabled = true;\n    } else {\n      console.warn('Scale Manager was not passed a function');\n    }\n  }\n\n  /**\n   * Disables the scale manager.\n   */\n  disable() {\n    this.resizer.enabled = false;\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Enables the scale manager listener. Will not be enabled if a callback is not supplied."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The function to be called on resize events.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "loc": {
            "start": {
              "line": 45,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 49,
                "column": 2
              },
              "end": {
                "line": 56,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The function to be called on resize events."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "enable",
          "kind": "function",
          "memberof": "ScaleManager",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ScaleManager",
              "kind": "class"
            },
            {
              "name": "enable",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "ScaleManager#enable"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Disables the scale manager."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 63,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaleManager.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "disable",
          "kind": "function",
          "memberof": "ScaleManager",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ScaleManager",
              "kind": "class"
            },
            {
              "name": "disable",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "ScaleManager#disable"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "ScaleManager",
        "kind": "class"
      }
    ],
    "namespace": "ScaleManager"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Utility class that handles resize events for ScaleManager and SafeScaleManager."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "internal",
        "description": null,
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 125,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "resizeCallback",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of ResizeHelper."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": null,
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "function"
          },
          "name": "resizeCallback"
        },
        {
          "title": "memberof",
          "description": "ResizeHelper",
          "lineNumber": 3
        }
      ],
      "loc": {
        "start": {
          "line": 32,
          "column": 2
        },
        "end": {
          "line": 36,
          "column": 4
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 37,
            "column": 2
          },
          "end": {
            "line": 69,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000131!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/index.js:00000003!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ScaleManager.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js 00000037",
        "code": "{\n  /**\n   * Whether or not the application is running on an iOS device.\n   * @readonly\n   * @memberof ResizeHelper\n   */\n  get iOS() { return !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform); }\n\n  /**\n   * Returns the enabled state of the ResizeHelper.\n   * @memberof ResizeHelper\n   */\n  get enabled() { return this._enabled; }\n  /**\n   * Sets the enabled state of the ResizeHelper.\n   * Forces a resize event.\n   * @memberof ResizeHelper\n   */\n  set enabled(value) {\n    this._enabled = value;\n    if (this._enabled) {\n      this.resize();\n    }\n  }\n\n  /**\n   *Creates an instance of ResizeHelper.\n  * @param {function} resizeCallback\n  * @memberof ResizeHelper\n  */\n  constructor(resizeCallback) {\n    this._enabled = true;\n    this.resizeCallback = resizeCallback;\n\n    // Setup a listener for the 'resize' event from the window's event system.\n    window.addEventListener('resize', this.onWindowResize.bind(this));\n\n    // Defaulted to needing a resize loop on iOS devices due to a potential bug where\n    // the window resize event isn't dispatched at the correct time.\n    let requiresResizeLoop = this.iOS;\n\n    // Setup environment specific resize event variables\n    if (typeof Event === 'function') {\n      this.resize();\n    }\n    else {\n      this.resizeEvent = window.document.createEvent('UIEvents');\n      this.resizeEvent.initUIEvent('resize', true, false, window, 0);\n      requiresResizeLoop = true;\n    }\n\n    if (requiresResizeLoop) {\n      // The resize loop will observe the aspect ratio of the window and will dispatch events anytime it changes.\n      this.aspectRatio = new Property(0);\n      this.aspectRatio.subscribe(this.resize.bind(this));\n\n      // Call the first resize tick.\n      this.resizeTick();\n\n      // Check for aspect ratio change every 50 milliseconds.\n      setInterval(this.resizeTick.bind(this), 50);\n    }\n  }\n\n  /**\n   * For older browsers, specifically for IE11, starts a loop making sure resize events are fired.\n   * @memberof ResizeHelper\n   * @private\n   */\n  resizeTick() {\n    // Make sure references to the window dimensions are up to date.\n    const resolution = this.getWindowResolution();\n\n    // Update the aspect ratio property.\n    this.aspectRatio.value = Math.round((resolution.height / resolution.width) * 1000) * 0.0001;\n  }\n\n  /**\n   * Dispatches window resize events if the ResizeHelper is manually handling a resize loop.\n   * This is the callback for the aspectRatio property change and is intended to only be called in\n   * specific environments or when enabling/disableing the ResizeHelper.\n   * @memberof ResizeHelper\n   * @private\n   */\n  resize() {\n    window.dispatchEvent(this.resizeEvent ? this.resizeEvent : new Event('resize'));\n  }\n\n  /**\n   * Handler for window resize events. Forwards this event to the scale manager if enabled.\n   * @memberof ResizeHelper\n   */\n  onWindowResize() {\n    if (!this.enabled) {\n      return;\n    }\n    // Call the resize callback to handle scaling logic.\n    this.resizeCallback(this.getWindowResolution());\n  }\n\n  /**\n   * Sets the window width and window height values of the ResizeHelper.\n   * @memberof ResizeHelper\n   */\n  getWindowResolution() {\n    let width, height;\n\n    if (this.iOS) {\n      width = document.documentElement.clientWidth;\n      height = document.documentElement.clientHeight;\n    }\n    else {\n      width = window.innerWidth;\n      height = window.innerHeight;\n    }\n\n    return { width, height };\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "resizeCallback",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "function"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "ResizeHelper"
    },
    "name": "ResizeHelper",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Whether or not the application is running on an iOS device."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "readonly",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "memberof",
              "description": "ResizeHelper",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 91
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "readonly": true,
          "memberof": "ResizeHelper",
          "name": "iOS",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ResizeHelper",
              "kind": "class"
            },
            {
              "name": "iOS",
              "kind": "member"
            }
          ],
          "namespace": "ResizeHelperiOS"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the enabled state of the ResizeHelper."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "ResizeHelper",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 15,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 19,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 41
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "ResizeHelper",
          "name": "enabled",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ResizeHelper",
              "kind": "class"
            },
            {
              "name": "enabled",
              "kind": "member"
            }
          ],
          "namespace": "ResizeHelperenabled"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the enabled state of the ResizeHelper.\nForces a resize event."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "ResizeHelper",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 25,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "value",
              "lineNumber": 25
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "ResizeHelper",
          "name": "enabled",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ResizeHelper",
              "kind": "class"
            },
            {
              "name": "enabled",
              "kind": "member"
            }
          ],
          "namespace": "ResizeHelperenabled"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Handler for window resize events. Forwards this event to the scale manager if enabled."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "ResizeHelper",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 99,
                "column": 2
              },
              "end": {
                "line": 105,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "ResizeHelper",
          "name": "onWindowResize",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ResizeHelper",
              "kind": "class"
            },
            {
              "name": "onWindowResize",
              "kind": "function"
            }
          ],
          "namespace": "ResizeHelperonWindowResize"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the window width and window height values of the ResizeHelper."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "ResizeHelper",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 111,
                "column": 2
              },
              "end": {
                "line": 124,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/scale-manager/ResizeHelper.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "ResizeHelper",
          "name": "getWindowResolution",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ResizeHelper",
              "kind": "class"
            },
            {
              "name": "getWindowResolution",
              "kind": "function"
            }
          ],
          "namespace": "ResizeHelpergetWindowResolution"
        }
      ]
    },
    "path": [
      {
        "name": "ResizeHelper",
        "kind": "class"
      }
    ],
    "namespace": "ResizeHelper"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "SpeechSync makes it easy to convert text to speech.\nNote: This is not supported on IE11 and below because of the underlying APIs are not implemented in those browsers"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "SpeechSynth"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "params"
      },
      {
        "title": "param",
        "description": "Indicates what voice to use.",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "params.voice",
        "default": "0"
      },
      {
        "title": "param",
        "description": "The rate at which the text is said. Supports a range from 0.1 to 10.",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "params.rate",
        "default": "1"
      },
      {
        "title": "param",
        "description": "Voice Pitch. Supports a pitch from 0 to 2.",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "params.pitch",
        "default": "0"
      },
      {
        "title": "param",
        "description": "Volume. Supports 0 to 1.",
        "lineNumber": 8,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "params.volume",
        "default": "1"
      },
      {
        "title": "property",
        "description": "voices are loaded async. This is will be set to true when they are loaded.",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "voicesLoaded"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 199,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "params",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "properties": [
          {
            "title": "param",
            "name": "params.voice",
            "lineNumber": 5,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicates what voice to use."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "default": "0"
          },
          {
            "title": "param",
            "name": "params.rate",
            "lineNumber": 6,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "The rate at which the text is said. Supports a range from 0.1 to 10."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "default": "1"
          },
          {
            "title": "param",
            "name": "params.pitch",
            "lineNumber": 7,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Voice Pitch. Supports a pitch from 0 to 2."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "default": "0"
          },
          {
            "title": "param",
            "name": "params.volume",
            "lineNumber": 8,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Volume. Supports 0 to 1."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "default": "1"
          }
        ]
      }
    ],
    "properties": [
      {
        "title": "property",
        "name": "voicesLoaded",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "voices are loaded async. This is will be set to true when they are loaded."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "SpeechSynth",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of SpeechSynth."
              }
            ]
          }
        ]
      },
      "tags": [],
      "loc": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 15,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 16,
            "column": 2
          },
          "end": {
            "line": 52,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000132!/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js 00000016",
        "code": "{\n  /**\n   * Creates an instance of SpeechSynth.\n   */\n  constructor({ voice = 0, rate = 1, pitch = 0, volume = 1 } = {}) {\n    if (!window.speechSynthesis) {\n      console.error(\n        'Springroll SpeechSynth is not supported on on this Device'\n      );\n      return;\n    }\n    this.voiceOptions = [];\n    this.voicesLoaded = false;\n    this.queue = [];\n\n    this.options = {\n      voice: {},\n      rate,\n      pitch,\n      volume\n    };\n\n    /**\n     * Called when voices are ready to be used.\n     * @private\n     */\n    const loadVoices = function() {\n      this.voiceOptions = window.speechSynthesis.getVoices();\n      this.voice = this.setVoice(voice);\n      this.voicesLoaded = true;\n    }.bind(this);\n\n    const voiceOptions = window.speechSynthesis.getVoices();\n    if (Array.isArray(voiceOptions) && 0 < voiceOptions.length) {\n      loadVoices();\n    } else {\n      window.speechSynthesis.addEventListener('voiceschanged', loadVoices, {\n        once: true\n      });\n    }\n  }\n\n  /**\n   * Pauses the announcer.\n   */\n  pause() {\n    this.speaking = false;\n    window.speechSynthesis.pause();\n  }\n\n  /**\n   * Resumes the announcer.\n   */\n  resume() {\n    this.speaking = true;\n    window.speechSynthesis.resume();\n  }\n\n  /**\n   * Pauses the announcer and clears the queue.\n   */\n  cancel() {\n    this.speaking = false;\n    this.pause();\n    this.queue.length = 0;\n    window.speechSynthesis.cancel();\n  }\n\n  /**\n   * Causes the announcer to say whatever message is passed to it.\n   * If the announcer is already saying something then it will be added to a queue.\n   * @param {string} message\n   */\n  say(message) {\n    if (this.speaking || !this.voicesLoaded) {\n      this.queue.push(message);\n      return;\n    }\n\n    const onEnd = () => {\n      this.speaking = false;\n\n      if (0 < this.queue.length) {\n        this.say(this.queue.shift());\n      }\n    };\n\n    this.speaking = true;\n\n    const speaker = new SpeechSynthesisUtterance(message);\n\n    Object.assign(speaker, this.options);\n\n    speaker.onend = onEnd;\n\n    window.speechSynthesis.speak(speaker);\n  }\n\n  /**\n   * Helper function to control the range of values.\n   * Will return the min value if not a number.\n   * @private\n   * @param {number} min\n   * @param {number} max\n   * @param {number} value\n   * @returns {number}\n   */\n  rangeLimit(min, max, value) {\n    if (isNaN(value)) {\n      console.warn(`'${value}' is not a valid number!`);\n      return min;\n    }\n\n    if (value >= max) {\n      return max;\n    }\n\n    if (min >= value) {\n      return min;\n    }\n\n    return value;\n  }\n\n  /**\n   * Sets the voice by array index.\n   * @param {number} index\n   */\n  setVoice(index) {\n    this.options.voice = this.voiceOptions[index];\n  }\n\n  /**\n   * Returns the voice object.\n   * @returns {object | null}\n   */\n  getVoice() {\n    return this.options.voice;\n  }\n\n  /**\n   * Rate at which text is spoken.\n   * @param {number} rate\n   */\n  set rate(rate) {\n    this.options.rate = this.rangeLimit(0.1, 10, rate);\n  }\n\n  /**\n   * Returns rate which text is spoken.\n   * @returns {number}\n   */\n  get rate() {\n    return this.options.rate;\n  }\n\n  /**\n   * Sets the pitch at which text is spoken.\n   * @param {number} pitch\n   */\n  set pitch(pitch) {\n    this.options.pitch = this.rangeLimit(0, 2, pitch);\n  }\n\n  /**\n   * Returns the pitch at which text is spoken.\n   * @returns {number}\n   */\n  get pitch() {\n    return this.options.pitch;\n  }\n\n  /**\n   * Sets the current volume of the announcer.\n   * @param {number} volume\n   */\n  set volume(volume) {\n    this.options.volume = this.rangeLimit(0, 1, volume);\n  }\n\n  /**\n   * Returns the current volume of the announcer.\n   * @returns {number}\n   */\n  get volume() {\n    return this.options.volume;\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Pauses the announcer."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 54,
              "column": 2
            },
            "end": {
              "line": 56,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 57,
                "column": 2
              },
              "end": {
                "line": 60,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "pause",
          "kind": "function",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "pause",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#pause"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Resumes the announcer."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 65,
                "column": 2
              },
              "end": {
                "line": 68,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "resume",
          "kind": "function",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "resume",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#resume"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Pauses the announcer and clears the queue."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 73,
                "column": 2
              },
              "end": {
                "line": 78,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "cancel",
          "kind": "function",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "cancel",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#cancel"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Causes the announcer to say whatever message is passed to it.\nIf the announcer is already saying something then it will be added to a queue."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "message"
            }
          ],
          "loc": {
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 85,
                "column": 2
              },
              "end": {
                "line": 108,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "message",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "say",
          "kind": "function",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "say",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#say"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the voice by array index."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            }
          ],
          "loc": {
            "start": {
              "line": 136,
              "column": 2
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 140,
                "column": 2
              },
              "end": {
                "line": 142,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "index",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setVoice",
          "kind": "function",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "setVoice",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#setVoice"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the voice object."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "object"
                  },
                  {
                    "type": "NullLiteral"
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 144,
              "column": 2
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 148,
                "column": 2
              },
              "end": {
                "line": 150,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "object"
                  },
                  {
                    "type": "NullLiteral"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getVoice",
          "kind": "function",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "getVoice",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#getVoice"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Rate at which text is spoken."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "rate"
            }
          ],
          "loc": {
            "start": {
              "line": 152,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 156,
                "column": 2
              },
              "end": {
                "line": 158,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "rate",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "rate",
          "kind": "member",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "rate",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#rate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns rate which text is spoken."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 164,
                "column": 2
              },
              "end": {
                "line": 166,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "rate",
          "kind": "member",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "rate",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#rate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the pitch at which text is spoken."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "pitch"
            }
          ],
          "loc": {
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 172,
                "column": 2
              },
              "end": {
                "line": 174,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "pitch",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "pitch",
          "kind": "member",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "pitch",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#pitch"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the pitch at which text is spoken."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 176,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 180,
                "column": 2
              },
              "end": {
                "line": 182,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "pitch",
          "kind": "member",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "pitch",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#pitch"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the current volume of the announcer."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "volume"
            }
          ],
          "loc": {
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 187,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 188,
                "column": 2
              },
              "end": {
                "line": 190,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "volume",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "volume",
          "kind": "member",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "volume",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#volume"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the current volume of the announcer."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 195,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 196,
                "column": 2
              },
              "end": {
                "line": 198,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/SpeechSynth/SpeechSynth.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "volume",
          "kind": "member",
          "memberof": "SpeechSynth",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "SpeechSynth",
              "kind": "class"
            },
            {
              "name": "volume",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "SpeechSynth#volume"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "SpeechSynth",
        "kind": "class"
      }
    ],
    "namespace": "SpeechSynth"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "StringLiteralType",
              "value": "protanopia"
            },
            {
              "type": "StringLiteralType",
              "value": "protanomaly"
            },
            {
              "type": "StringLiteralType",
              "value": "deuteranopia"
            },
            {
              "type": "StringLiteralType",
              "value": "deuteranomaly"
            },
            {
              "type": "StringLiteralType",
              "value": "tritanopia"
            },
            {
              "type": "StringLiteralType",
              "value": "tritanomaly"
            },
            {
              "type": "StringLiteralType",
              "value": "achromatopsia"
            },
            {
              "type": "StringLiteralType",
              "value": "achromatomaly"
            }
          ]
        },
        "name": "filterType"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 192,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "filterType",
    "type": {
      "type": "UnionType",
      "elements": [
        {
          "type": "StringLiteralType",
          "value": "protanopia"
        },
        {
          "type": "StringLiteralType",
          "value": "protanomaly"
        },
        {
          "type": "StringLiteralType",
          "value": "deuteranopia"
        },
        {
          "type": "StringLiteralType",
          "value": "deuteranomaly"
        },
        {
          "type": "StringLiteralType",
          "value": "tritanopia"
        },
        {
          "type": "StringLiteralType",
          "value": "tritanomaly"
        },
        {
          "type": "StringLiteralType",
          "value": "achromatopsia"
        },
        {
          "type": "StringLiteralType",
          "value": "achromatomaly"
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "filterType",
        "kind": "typedef"
      }
    ],
    "namespace": "filterType"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The Color filter allows you to simulate colorblindness."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "ColorFilter"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 192,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "ColorFilter",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of ColorFilter."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "memberof",
          "description": "ColorFilter",
          "lineNumber": 2
        },
        {
          "title": "param",
          "description": "target html element to apply the filter too",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "HTMLElement"
          },
          "name": "element"
        },
        {
          "title": "param",
          "description": "the",
          "lineNumber": 4,
          "type": {
            "type": "NameExpression",
            "name": "filterType"
          },
          "name": "type"
        }
      ],
      "loc": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 18,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 19,
            "column": 2
          },
          "end": {
            "line": 116,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000132!/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/index.js:00000001!/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js 00000019",
        "code": "{\n  /**\n   * Creates an instance of ColorFilter.\n   * @memberof ColorFilter\n   * @param {HTMLElement} element target html element to apply the filter too\n   * @param {filterType} type the\n   */\n  constructor(element = undefined, type = undefined) {\n    if (isIE11) {\n      console.error('Springroll ColorFilter is not supported on IE11');\n      return;\n    }\n    this.element = null;\n    if (null === document.getElementById('color__filter__svg')) {\n      const div = document.createElement('div');\n\n      div.style.width = '0';\n      div.style.height = '0';\n      div.style.position = 'absolute';\n      div.style.opacity = '0';\n\n      div.innerHTML += `<svg id=\"color__filter__svg\" style=\"width: 0; height: 0; position: absolute;\" xmlns=\"http://www.w3.org/2000/svg\"\n      version=\"1.1\">\n      <defs>\n        <filter id=\"color__filter__protanopia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.567, 0.433, 0,     0, 0\n                    0.558, 0.442, 0,     0, 0\n                    0,     0.242, 0.758, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__protanomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.817, 0.183, 0,     0, 0\n                    0.333, 0.667, 0,     0, 0\n                    0,     0.125, 0.875, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__deuteranopia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.625, 0.375, 0,   0, 0\n                    0.7,   0.3,   0,   0, 0\n                    0,     0.3,   0.7, 0, 0\n                    0,     0,     0,   1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__deuteranomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.8,   0.2,   0,     0, 0\n                    0.258, 0.742, 0,     0, 0\n                    0,     0.142, 0.858, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__tritanopia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.95, 0.05,  0,     0, 0\n                    0,    0.433, 0.567, 0, 0\n                    0,    0.475, 0.525, 0, 0\n                    0,    0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__tritanomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.967, 0.033, 0,     0, 0\n                    0,     0.733, 0.267, 0, 0\n                    0,     0.183, 0.817, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__achromatopsia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.299, 0.587, 0.114, 0, 0\n                    0.299, 0.587, 0.114, 0, 0\n                    0.299, 0.587, 0.114, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__achromatomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.618, 0.320, 0.062, 0, 0\n                    0.163, 0.775, 0.062, 0, 0\n                    0.163, 0.320, 0.516, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n      </defs>\n      </svg>\n      `;\n      document.body.appendChild(div);\n    }\n    if (element instanceof HTMLElement && 'string' === typeof type) {\n      this.applyFilter(element, type);\n    }\n  }\n\n  /**\n   * Applies the specified filter to the element.\n   * @param {HTMLElement} element\n   * @param {filterType} type\n   * @memberof ColorFilter\n   */\n  applyFilter(element, type) {\n    this.element = element;\n    this.changeFilter(type);\n  }\n\n  /**\n   * Changes the currently applied filter to the element if the color filter has it.\n   * @param {filterType} type\n   * @returns\n   * @memberof ColorFilter\n   */\n  changeFilter(type) {\n    if (null !== this.element) {\n      this.element.style.filter = `url(#color__filter__${type})`;\n    }\n  }\n\n  /**\n   * Removes the filter from the element.\n   * @memberof ColorFilter\n   */\n  removeFilter() {\n    this.element.style.filter = null;\n  }\n\n  /**\n   * Supported filter types.\n   * @readonly\n   * @memberof ColorFilter\n   * @returns { object } Returns an object { name, value } with the colorblindness type:\n   * (Protanopia, Protanomaly, Deuteranopia, Deuteranomaly, Tritanopia, Tritanomaly, Achromatopsia, Achromatomaly)\n   */\n  get types() {\n    return [\n      {\n        name: 'Protanopia',\n        value: 'protanopia'\n      },\n      {\n        name: 'Protanomaly',\n        value: 'protanomaly'\n      },\n      {\n        name: 'Deuteranopia',\n        value: 'deuteranopia'\n      },\n      {\n        name: 'Deuteranomaly',\n        value: 'deuteranomaly'\n      },\n      {\n        name: 'Tritanopia',\n        value: 'tritanopia'\n      },\n      {\n        name: 'Tritanomaly',\n        value: 'tritanomaly'\n      },\n      {\n        name: 'Achromatopsia',\n        value: 'achromatopsia'\n      },\n      {\n        name: 'Achromatomaly',\n        value: 'achromatomaly'\n      }\n    ];\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "element",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "target html element to apply the filter too"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "HTMLElement"
          }
        },
        {
          "title": "param",
          "name": "type",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "the"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "filterType"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "ColorFilter"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Applies the specified filter to the element."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "HTMLElement"
              },
              "name": "element"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "filterType"
              },
              "name": "type"
            },
            {
              "title": "memberof",
              "description": "ColorFilter",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 124,
                "column": 2
              },
              "end": {
                "line": 127,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "element",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "HTMLElement"
              }
            },
            {
              "title": "param",
              "name": "type",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "filterType"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "ColorFilter",
          "name": "applyFilter",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ColorFilter",
              "kind": "class"
            },
            {
              "name": "applyFilter",
              "kind": "function"
            }
          ],
          "namespace": "ColorFilterapplyFilter"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Changes the currently applied filter to the element if the color filter has it."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "filterType"
              },
              "name": "type"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 3,
              "type": null
            },
            {
              "title": "memberof",
              "description": "ColorFilter",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 135,
                "column": 2
              },
              "end": {
                "line": 139,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "type",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "filterType"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns"
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "ColorFilter",
          "name": "changeFilter",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ColorFilter",
              "kind": "class"
            },
            {
              "name": "changeFilter",
              "kind": "function"
            }
          ],
          "namespace": "ColorFilterchangeFilter"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Removes the filter from the element."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "ColorFilter",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 141,
              "column": 2
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 145,
                "column": 2
              },
              "end": {
                "line": 147,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "ColorFilter",
          "name": "removeFilter",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ColorFilter",
              "kind": "class"
            },
            {
              "name": "removeFilter",
              "kind": "function"
            }
          ],
          "namespace": "ColorFilterremoveFilter"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Supported filter types."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "readonly",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "memberof",
              "description": "ColorFilter",
              "lineNumber": 3
            },
            {
              "title": "returns",
              "description": "Returns an object { name, value } with the colorblindness type:\n(Protanopia, Protanomaly, Deuteranopia, Deuteranomaly, Tritanopia, Tritanomaly, Achromatopsia, Achromatomaly)",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 156,
                "column": 2
              },
              "end": {
                "line": 191,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/accessibility/ColorFilter/ColorFilter.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Returns an object { name, value } with the colorblindness type:\n(Protanopia, Protanomaly, Deuteranopia, Deuteranomaly, Tritanopia, Tritanomaly, Achromatopsia, Achromatomaly)"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "readonly": true,
          "memberof": "ColorFilter",
          "name": "types",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ColorFilter",
              "kind": "class"
            },
            {
              "name": "types",
              "kind": "member"
            }
          ],
          "namespace": "ColorFiltertypes"
        }
      ]
    },
    "path": [
      {
        "name": "ColorFilter",
        "kind": "class"
      }
    ],
    "namespace": "ColorFilter"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "KeyTemplate"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "name": "down"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "name": "up"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NumericLiteralType",
              "value": 0
            },
            {
              "type": "NumericLiteralType",
              "value": 1
            },
            {
              "type": "NumericLiteralType",
              "value": 2
            }
          ]
        },
        "name": "KeyState"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 109,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "down",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      },
      {
        "title": "property",
        "name": "up",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      },
      {
        "title": "property",
        "name": "key",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "KeyState",
    "type": {
      "type": "UnionType",
      "elements": [
        {
          "type": "NumericLiteralType",
          "value": 0
        },
        {
          "type": "NumericLiteralType",
          "value": 1
        },
        {
          "type": "NumericLiteralType",
          "value": 2
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "KeyState",
        "kind": "typedef"
      }
    ],
    "namespace": "KeyState"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Controller interface class to simplify working with key presses."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "Controller"
      },
      {
        "title": "param",
        "description": "An object containing all keys you want to watch and their functions. e.g. {enter: () => {}}. See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for potential values.",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "KeyTemplate"
              }
            ]
          }
        },
        "name": "buttons",
        "default": "[]"
      }
    ],
    "loc": {
      "start": {
        "line": 13,
        "column": 0
      },
      "end": {
        "line": 18,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 109,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "buttons",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "An object containing all keys you want to watch and their functions. e.g. {enter: () => {}}. See "
                },
                {
                  "type": "link",
                  "title": null,
                  "url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values",
                  "children": [
                    {
                      "type": "text",
                      "value": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"
                    }
                  ]
                },
                {
                  "type": "text",
                  "value": " for potential values."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "KeyTemplate"
            }
          ]
        },
        "default": "[]"
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Controller",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of Controller."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "memberof",
          "description": "Controller",
          "lineNumber": 2
        }
      ],
      "loc": {
        "start": {
          "line": 20,
          "column": 2
        },
        "end": {
          "line": 23,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 24,
            "column": 2
          },
          "end": {
            "line": 30,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000133!/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js 00000024",
        "code": "{\n  /**\n   * Creates an instance of Controller.\n   * @memberof Controller\n   */\n  constructor(keys = []) {\n    this.assignButtons(keys);\n\n    window.addEventListener('blur', this.onWindowBlur.bind(this));\n    window.addEventListener('keydown', this.onKeyDown.bind(this));\n    window.addEventListener('keyup', this.onKeyUp.bind(this));\n  }\n\n  /**\n   * Calls all functions for buttons that are currently set to enabled.\n   * @memberof Controller\n   */\n  update() {\n    for (let i = 0, l = this.keys.length; i < l; i++) {\n      this.buttons[this.keys[i]].action();\n    }\n  }\n\n  /**\n   * Called on keyup. Sets flag to 1 if key is being watched.\n   * @param {KeyboardEvent} e\n   * @memberof Controller\n   */\n  onKeyDown(e) {\n    this.onKey(e, 1);\n  }\n\n  /**\n   * Called on keyup. Sets flag to 2 if key is being watched.\n   * @param {KeyboardEvent} e\n   * @memberof Controller\n   */\n  onKeyUp(e) {\n    this.onKey(e, 2);\n  }\n\n  /**\n   * Called on window blur, sets button state to up if button was down;\n   * @return {void}@memberof Controller\n   */\n  onWindowBlur() {\n    for (const key of Object.keys(this.buttons)) {\n      const button = this.buttons[key];\n\n      if (button._state === 1) {\n        this.buttons[key].updateState(2);\n      }\n    }\n  }\n\n  /**\n   * Sets an object of button functions to the controller to be called.\n   * @param {KeyTemplate[]} keys\n   * @memberof Controller\n   */\n  assignButtons(keys) {\n    this.buttons = {};\n    this.keys = [];\n    for (let i = 0, l = keys.length; i < l; i++) {\n      const currentKey = keys[i].key.toLowerCase();\n      const altKey = alternateKeyMap[currentKey];\n\n      if (altKey !== undefined) {\n        this.keys.push(altKey);\n        this.buttons[altKey] = new Key(altKey, keys[i].down, keys[i].up);\n      }\n\n      this.keys.push(currentKey);\n      this.buttons[currentKey] = new Key(currentKey, keys[i].down, keys[i].up);\n    }\n  }\n\n  /**\n   * Helper class to reduce code between event functions.\n   * @private\n   * @param {KeyboardEvent} event\n   * @param {KeyState} state\n   * @memberof Controller\n   */\n  onKey(event, state) {\n    const key = event.key.toLowerCase();\n    if (this.buttons[key]) {\n      this.buttons[key].updateState(state);\n    }\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "Controller"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Called on window blur, sets button state to up if button was down;"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "return",
              "description": "@memberof Controller",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 64,
                "column": 2
              },
              "end": {
                "line": 72,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof Controller"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "onWindowBlur",
          "kind": "function",
          "memberof": "Controller",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Controller",
              "kind": "class"
            },
            {
              "name": "onWindowBlur",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Controller#onWindowBlur"
        }
      ],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Calls all functions for buttons that are currently set to enabled."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "Controller",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 36,
                "column": 2
              },
              "end": {
                "line": 40,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Controller",
          "name": "update",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Controller",
              "kind": "class"
            },
            {
              "name": "update",
              "kind": "function"
            }
          ],
          "namespace": "Controllerupdate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Called on keyup. Sets flag to 1 if key is being watched."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "KeyboardEvent"
              },
              "name": "e"
            },
            {
              "title": "memberof",
              "description": "Controller",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 47,
                "column": 2
              },
              "end": {
                "line": 49,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "e",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "KeyboardEvent"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Controller",
          "name": "onKeyDown",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Controller",
              "kind": "class"
            },
            {
              "name": "onKeyDown",
              "kind": "function"
            }
          ],
          "namespace": "ControlleronKeyDown"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Called on keyup. Sets flag to 2 if key is being watched."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "KeyboardEvent"
              },
              "name": "e"
            },
            {
              "title": "memberof",
              "description": "Controller",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 56,
                "column": 2
              },
              "end": {
                "line": 58,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "e",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "KeyboardEvent"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Controller",
          "name": "onKeyUp",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Controller",
              "kind": "class"
            },
            {
              "name": "onKeyUp",
              "kind": "function"
            }
          ],
          "namespace": "ControlleronKeyUp"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets an object of button functions to the controller to be called."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "KeyTemplate"
                  }
                ]
              },
              "name": "keys"
            },
            {
              "title": "memberof",
              "description": "Controller",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 79,
                "column": 2
              },
              "end": {
                "line": 94,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "keys",
              "lineNumber": 2,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "KeyTemplate"
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Controller",
          "name": "assignButtons",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Controller",
              "kind": "class"
            },
            {
              "name": "assignButtons",
              "kind": "function"
            }
          ],
          "namespace": "ControllerassignButtons"
        }
      ]
    },
    "path": [
      {
        "name": "Controller",
        "kind": "class"
      }
    ],
    "namespace": "Controller"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Represents a single key on the keyboard and the functions related to it."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "Key"
      },
      {
        "title": "property",
        "description": "The current state of the key. 0 = inactive, 1 = active, 2 = to be set to inactive.",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NumericLiteralType",
              "value": 0
            },
            {
              "type": "NumericLiteralType",
              "value": 1
            },
            {
              "type": "NumericLiteralType",
              "value": 2
            }
          ]
        },
        "name": "state"
      },
      {
        "title": "property",
        "description": "The name of the key we are targeting.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "actions"
      },
      {
        "title": "property",
        "description": "Function to be called while the key is held down.",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "actions.down"
      },
      {
        "title": "property",
        "description": "Function to be called when the key is lifted up.",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "actions.up"
      },
      {
        "title": "param",
        "description": "What this object represents.",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "param",
        "description": "Function to be called while the key is held down.",
        "lineNumber": 9,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Function"
          }
        },
        "name": "down",
        "default": "()=>{}"
      },
      {
        "title": "param",
        "description": "Function to be called when the key is lifted up.",
        "lineNumber": 10,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Function"
          }
        },
        "name": "up",
        "default": "()=>{}"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Key.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "What this object represents."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "down",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Function to be called while the key is held down."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "default": "()=>{}"
      },
      {
        "title": "param",
        "name": "up",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Function to be called when the key is lifted up."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "default": "()=>{}"
      }
    ],
    "properties": [
      {
        "title": "property",
        "name": "state",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The current state of the key. 0 = inactive, 1 = active, 2 = to be set to inactive."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NumericLiteralType",
              "value": 0
            },
            {
              "type": "NumericLiteralType",
              "value": 1
            },
            {
              "type": "NumericLiteralType",
              "value": 2
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "key",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The name of the key we are targeting."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "property",
        "name": "actions",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "properties": [
          {
            "title": "property",
            "name": "actions.down",
            "lineNumber": 6,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to be called while the key is held down."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "NameExpression",
              "name": "function"
            }
          },
          {
            "title": "property",
            "name": "actions.up",
            "lineNumber": 7,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to be called when the key is lifted up."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "NameExpression",
              "name": "function"
            }
          }
        ]
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Key",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of Key."
              }
            ]
          }
        ]
      },
      "tags": [],
      "loc": {
        "start": {
          "line": 14,
          "column": 2
        },
        "end": {
          "line": 16,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 17,
            "column": 2
          },
          "end": {
            "line": 24,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Key.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000133!/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Controller.js:00000001!/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Key.js 00000017",
        "code": "{\n  /**\n   * Creates an instance of Key.\n   */\n  constructor(key, down, up) {\n    this.key = key;\n    this._state = 0;\n    this.actions = {\n      up,\n      down\n    };\n  }\n\n  /**\n   *\n   * Updates the internal state of the key. Accepts a range between 0-2. Will set key state to 0 if nothing is passed.\n   * @param {0 | 1 | 2} [state=0]\n   * @memberof Key\n   */\n  updateState(state = 0) {\n    if (state < 3 && state > -1) {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Calls the relevant action for the current state of the key.\n   * @memberof Key\n   */\n  action() {\n    if (1 === this.state) {\n      if (this.actions.down) {\n        this.actions.down();\n      }\n    } else if (2 === this.state) {\n      if (this.actions.up) {\n        this.actions.up();\n      }\n      this.updateState(0);\n    }\n  }\n\n  /**\n   *\n   * Returns the current state of the key.\n   * @readonly\n   * @returns { number }\n   * @memberof Key\n   */\n  get state() {\n    return this._state;\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Updates the internal state of the key. Accepts a range between 0-2. Will set key state to 0 if nothing is passed."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NumericLiteralType",
                      "value": 0
                    },
                    {
                      "type": "NumericLiteralType",
                      "value": 1
                    },
                    {
                      "type": "NumericLiteralType",
                      "value": 2
                    }
                  ]
                }
              },
              "name": "state",
              "default": "0"
            },
            {
              "title": "memberof",
              "description": "Key",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Key.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 3,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NumericLiteralType",
                    "value": 0
                  },
                  {
                    "type": "NumericLiteralType",
                    "value": 1
                  },
                  {
                    "type": "NumericLiteralType",
                    "value": 2
                  }
                ]
              },
              "default": "0"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Key",
          "name": "updateState",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Key",
              "kind": "class"
            },
            {
              "name": "updateState",
              "kind": "function"
            }
          ],
          "namespace": "KeyupdateState"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Calls the relevant action for the current state of the key."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "Key",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 42,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Key.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Key",
          "name": "action",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Key",
              "kind": "class"
            },
            {
              "name": "action",
              "kind": "function"
            }
          ],
          "namespace": "Keyaction"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the current state of the key."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "readonly",
              "description": null,
              "lineNumber": 3
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "memberof",
              "description": "Key",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 62,
                "column": 2
              },
              "end": {
                "line": 64,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/controller/Key.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "readonly": true,
          "memberof": "Key",
          "name": "state",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Key",
              "kind": "class"
            },
            {
              "name": "state",
              "kind": "member"
            }
          ],
          "namespace": "Keystate"
        }
      ]
    },
    "path": [
      {
        "name": "Key",
        "kind": "class"
      }
    ],
    "namespace": "Key"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Main entry point for a game. Provides a single focal point for plugins and functionality to attach."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "Application"
      },
      {
        "title": "property",
        "description": "A configuration object denoting which features are enabled for this application",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "features"
      },
      {
        "title": "property",
        "description": "A boolean value denoting that this game supports captions",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.captions"
      },
      {
        "title": "property",
        "description": "A boolean value denoting that this game has some audio in it",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.sound"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has mutable voice-over audio in it",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.vo"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has mutable music in it",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.music"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has mutable sound effects in it",
        "lineNumber": 8,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.sfx"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable sound volume in it",
        "lineNumber": 9,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.soundVolume"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable music volume in it",
        "lineNumber": 10,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.musicVolume"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable voice-over volume in it",
        "lineNumber": 11,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.voVolume"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable sound effects volume in it",
        "lineNumber": 12,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.sfxVolume"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable pointer size in it",
        "lineNumber": 13,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.pointerSize"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable control sensitivity in it",
        "lineNumber": 14,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.controlSensitivity"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable button sizes in it",
        "lineNumber": 15,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.buttonSize"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has removable game layers in it",
        "lineNumber": 16,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.removableLayers"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has custom HUD positions.",
        "lineNumber": 17,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.hudPosition"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable hit areas.",
        "lineNumber": 18,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.hitAreaScale"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable drag thresholds.",
        "lineNumber": 19,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.dragThresholdScale"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable health.",
        "lineNumber": 20,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.health"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable object count requirements.",
        "lineNumber": 21,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.objectCount"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable completion percentage requirements.",
        "lineNumber": 22,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.completionPercentage"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable speed.",
        "lineNumber": 23,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.speedScale"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable timers.",
        "lineNumber": 24,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.timersScale"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has adjustable input count requirements.",
        "lineNumber": 25,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.inputCount"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has re-mappable key bindings.",
        "lineNumber": 26,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.keyBinding"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has color blindess filters",
        "lineNumber": 27,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.colorVision"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has fullScreen capabilities",
        "lineNumber": 28,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.fullScreen"
      },
      {
        "title": "property",
        "description": "A boolean denoting that this game has fullScreen capabilities",
        "lineNumber": 29,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "features.indexedDb"
      }
    ],
    "loc": {
      "start": {
        "line": 64,
        "column": 0
      },
      "end": {
        "line": 94,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 95,
          "column": 0
        },
        "end": {
          "line": 435,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "features",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "A configuration object denoting which features are enabled for this application"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "properties": [
          {
            "title": "property",
            "name": "features.captions",
            "lineNumber": 4,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean value denoting that this game supports captions"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.sound",
            "lineNumber": 5,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean value denoting that this game has some audio in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.vo",
            "lineNumber": 6,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has mutable voice-over audio in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.music",
            "lineNumber": 7,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has mutable music in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.sfx",
            "lineNumber": 8,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has mutable sound effects in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.soundVolume",
            "lineNumber": 9,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable sound volume in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.musicVolume",
            "lineNumber": 10,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable music volume in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.voVolume",
            "lineNumber": 11,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable voice-over volume in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.sfxVolume",
            "lineNumber": 12,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable sound effects volume in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.pointerSize",
            "lineNumber": 13,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable pointer size in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.controlSensitivity",
            "lineNumber": 14,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable control sensitivity in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.buttonSize",
            "lineNumber": 15,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable button sizes in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.removableLayers",
            "lineNumber": 16,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has removable game layers in it"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.hudPosition",
            "lineNumber": 17,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has custom HUD positions."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.hitAreaScale",
            "lineNumber": 18,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable hit areas."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.dragThresholdScale",
            "lineNumber": 19,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable drag thresholds."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.health",
            "lineNumber": 20,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable health."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.objectCount",
            "lineNumber": 21,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable object count requirements."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.completionPercentage",
            "lineNumber": 22,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable completion percentage requirements."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.speedScale",
            "lineNumber": 23,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable speed."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.timersScale",
            "lineNumber": 24,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable timers."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.inputCount",
            "lineNumber": 25,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has adjustable input count requirements."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.keyBinding",
            "lineNumber": 26,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has re-mappable key bindings."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.colorVision",
            "lineNumber": 27,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has color blindess filters"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.fullScreen",
            "lineNumber": 28,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has fullScreen capabilities"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          },
          {
            "title": "property",
            "name": "features.indexedDb",
            "lineNumber": 29,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "A boolean denoting that this game has fullScreen capabilities"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          }
        ]
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Application",
    "constructorComment": {
      "description": "",
      "tags": [
        {
          "title": "param",
          "description": "Root configuration object for various internal Application objects",
          "lineNumber": 1,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "object"
            }
          },
          "name": "config",
          "default": "{}"
        },
        {
          "title": "param",
          "description": "IHintPlayer application will use.",
          "lineNumber": 2,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "object"
            }
          },
          "name": "config.hintPlayer",
          "default": "HintSequencePlayer"
        },
        {
          "title": "param",
          "description": "A configuration object denoting which features are enabled for this application",
          "lineNumber": 3,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "object"
            }
          },
          "name": "config.features",
          "default": "{}"
        },
        {
          "title": "param",
          "description": "A boolean value denoting that this game supports captions",
          "lineNumber": 4,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.captions"
        },
        {
          "title": "param",
          "description": "A boolean value denoting that this game has some audio in it",
          "lineNumber": 5,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.sound"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has mutable voice-over audio in it",
          "lineNumber": 6,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.vo"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has mutable music in it",
          "lineNumber": 7,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.music"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has mutable sound effects in it",
          "lineNumber": 8,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.sfx"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable sound volume in it",
          "lineNumber": 9,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.soundVolume"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable music volume in it",
          "lineNumber": 10,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.musicVolume"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable voice-over volume in it",
          "lineNumber": 11,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.voVolume"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable sound effects volume in it",
          "lineNumber": 12,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.sfxVolume"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable pointer size in it",
          "lineNumber": 13,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.pointerSize"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable control sensitivity in it",
          "lineNumber": 14,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.controlSensitivity"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable button sizes in it",
          "lineNumber": 15,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.buttonSize"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has removable game layers in it",
          "lineNumber": 16,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.removableLayers"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has custom HUD positions in it",
          "lineNumber": 17,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.hudPosition"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable hit areas.",
          "lineNumber": 18,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.hitAreaScale"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable drag thresholds.",
          "lineNumber": 19,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.dragThresholdScale"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable health.",
          "lineNumber": 20,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.health"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable object count requirements.",
          "lineNumber": 21,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.objectCount"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable completion percentage requirements.",
          "lineNumber": 22,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.completionPercentage"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable speed.",
          "lineNumber": 23,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.speedScale"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable timers.",
          "lineNumber": 24,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.timersScale"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has adjustable input count requirements.",
          "lineNumber": 25,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.inputCount"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has re-mappable key bindings.",
          "lineNumber": 26,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.keyBinding"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has color blindness filters.",
          "lineNumber": 27,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.colorVision"
        },
        {
          "title": "param",
          "description": "A boolean denoting that this game has fullScreen capabilities",
          "lineNumber": 28,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          },
          "name": "config.features.fullScreen"
        }
      ],
      "loc": {
        "start": {
          "line": 96,
          "column": 2
        },
        "end": {
          "line": 126,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 127,
            "column": 2
          },
          "end": {
            "line": 312,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000134!/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js 00000127",
        "code": "{\n  /**\n   * @param {object} [config={}]  Root configuration object for various internal Application objects\n   * @param {object} [config.hintPlayer = HintSequencePlayer] IHintPlayer application will use.\n   * @param {object} [config.features={}] A configuration object denoting which features are enabled for this application\n   * @param {boolean} [config.features.captions] A boolean value denoting that this game supports captions\n   * @param {boolean} [config.features.sound] A boolean value denoting that this game has some audio in it\n   * @param {boolean} [config.features.vo] A boolean denoting that this game has mutable voice-over audio in it\n   * @param {boolean} [config.features.music] A boolean denoting that this game has mutable music in it\n   * @param {boolean} [config.features.sfx] A boolean denoting that this game has mutable sound effects in it\n   * @param {boolean} [config.features.soundVolume] A boolean denoting that this game has adjustable sound volume in it\n   * @param {boolean} [config.features.musicVolume] A boolean denoting that this game has adjustable music volume in it\n   * @param {boolean} [config.features.voVolume] A boolean denoting that this game has adjustable voice-over volume in it\n   * @param {boolean} [config.features.sfxVolume] A boolean denoting that this game has adjustable sound effects volume in it\n   * @param {boolean} [config.features.pointerSize] A boolean denoting that this game has adjustable pointer size in it\n   * @param {boolean} [config.features.controlSensitivity] A boolean denoting that this game has adjustable control sensitivity in it\n   * @param {boolean} [config.features.buttonSize] A boolean denoting that this game has adjustable button sizes in it\n   * @param {boolean} [config.features.removableLayers] A boolean denoting that this game has removable game layers in it\n   * @param {boolean} [config.features.hudPosition] A boolean denoting that this game has custom HUD positions in it\n   * @param {boolean} [config.features.hitAreaScale] A boolean denoting that this game has adjustable hit areas.\n   * @param {boolean} [config.features.dragThresholdScale] A boolean denoting that this game has adjustable drag thresholds.\n   * @param {boolean} [config.features.health] A boolean denoting that this game has adjustable health.\n   * @param {boolean} [config.features.objectCount] A boolean denoting that this game has adjustable object count requirements.\n   * @param {boolean} [config.features.completionPercentage] A boolean denoting that this game has adjustable completion percentage requirements.\n   * @param {boolean} [config.features.speedScale] A boolean denoting that this game has adjustable speed.\n   * @param {boolean} [config.features.timersScale] A boolean denoting that this game has adjustable timers.\n   * @param {boolean} [config.features.inputCount] A boolean denoting that this game has adjustable input count requirements.\n   * @param {boolean} [config.features.keyBinding] A boolean denoting that this game has re-mappable key bindings.\n   * @param {boolean} [config.features.colorVision] A boolean denoting that this game has color blindness filters.\n   * @param {boolean} [config.features.fullScreen] A boolean denoting that this game has fullScreen capabilities\n   * \n   */\n  constructor({ features, hintPlayer = new HintSequencePlayer() } = {}) {\n    this.state = {\n      ready: new Property(false),\n      playOptions: new Property({}),\n      [pause]: new Property(undefined),\n      [captionsMuted]: new Property(undefined),\n      [captionsStyles]: new Property(undefined),\n      [soundVolume]: new Property(undefined),\n      [musicVolume]: new Property(undefined),\n      [voVolume]: new Property(undefined),\n      [sfxVolume]: new Property(undefined),\n      [pointerSize]: new Property(undefined),\n      [controlSensitivity]: new Property(undefined),\n      [buttonSize]: new Property(undefined),\n      [removableLayers]: new Property(undefined),\n      [hudPosition]: new Property(undefined),\n      [hitAreaScale]: new Property(undefined),\n      [dragThresholdScale]: new Property(undefined),\n      [health]: new Property(undefined),\n      [objectCount]: new Property(undefined),\n      [completionPercentage]: new Property(undefined),\n      [speedScale]: new Property(undefined),\n      [timersScale]: new Property(undefined),\n      [inputCount]: new Property(undefined),\n      [keyBinding]: new Property(undefined),\n      [colorVision]: new Property(undefined),\n      [fullScreen]: new Property(undefined),\n    };\n\n    this.features = Object.assign(\n      {\n        captions: false,\n        captionsStyles: false,\n        sound: false,\n        vo: false,\n        music: false,\n        sfx: false,\n        soundVolume: false,\n        musicVolume: false,\n        voVolume: false,\n        sfxVolume: false,\n        pointerSize: false,\n        controlSensitivity: false,\n        buttonSize: false,\n        removableLayers: false,\n        hudPosition: false,\n        keyBinding: false,\n        colorVision: false,\n        hitAreaScale: false,\n        dragThresholdScale: false,\n        health: false,\n        objectCount: false,\n        completionPercentage: false,\n        speedScale: false,\n        timersScale: false,\n        inputCount: false,\n        fullScreen: false,\n      },\n      features || {}\n    );\n\n    // always enable sound if one of the sound channels is enabled\n    if (this.features.vo || this.features.music || this.features.sfx) {\n      this.features.sound = true;\n    }\n\n    // create the connection to the container (if possible), and report features and SpringRoll 1 compat data\n    this.container = BellhopSingleton;\n    this.container.connect();\n    this.container.send('features', this.features);\n    this.container.send('keepFocus', false);\n\n    // listen for events from the container and keep the local value in sync\n    {\n      const events = [\n        soundVolume,\n        musicVolume,\n        voVolume,\n        sfxVolume,\n        captionsMuted,\n        captionsStyles,\n        pause,\n        pointerSize,\n        controlSensitivity,\n        buttonSize,\n        removableLayers,\n        hudPosition,\n        keyBinding,\n        colorVision,\n        hitAreaScale,\n        dragThresholdScale,\n        health,\n        objectCount,\n        completionPercentage,\n        speedScale,\n        timersScale,\n        inputCount,\n        fullScreen,\n      ];\n      const length = events.length;\n      for (let i = 0; i < length; i++) {\n        const property = this.state[events[i]];\n\n        // Listen for feature changes from the container.\n        this.container.on(\n          events[i],\n          containerEvent => (property.value = containerEvent.data)\n        );\n      }\n    }\n\n    // listen for legacy mute events from the container and map them to volume properties\n    {\n      const legacyListeners = [\n        { mute: 'soundMuted', volume: soundVolume },\n        { mute: 'musicMuted', volume: musicVolume },\n        { mute: 'voMuted', volume: voVolume },\n        { mute: 'sfxMuted', volume: sfxVolume }\n      ];\n\n      for (let i = 0; i < legacyListeners.length; i++) {\n        const property = this.state[legacyListeners[i].volume];\n        this.container.on(legacyListeners[i].mute, containerEvent => {\n          const previousValue = property._previousValue || 1;\n          property._previousValue = property.value;\n          property.value = containerEvent.data ? 0 : previousValue;\n        });\n      }\n    }\n\n    // maintain focus sync between the container and application\n    window.addEventListener('focus', () => this.container.send('focus', true));\n    window.addEventListener('blur', () => this.container.send('focus', false));\n\n    // attempt to fetch play options from the query string (passed by the Container)\n    const match = /playOptions=[^&$]*/.exec(window.location.search);\n    if (match !== null) {\n      const matchedToken = match[0];\n      const rawValue = decodeURIComponent(matchedToken.split('=')[1]);\n\n      try {\n        this.state.playOptions.value = JSON.parse(rawValue);\n      } catch (e) {\n        Debugger.log(\n          'warn',\n          'Failed to parse playOptions from query string:' + e.message\n        );\n      }\n    }\n\n    // Also attempt to fetch over the iframe barrier for old container support\n    this.container.fetch(\n      'playOptions',\n      e => (this.state.playOptions.value = e.data)\n    );\n\n    this.setupPlugins()\n      .catch(e => {\n        Debugger.log('warn', e);\n      })\n      .then(() => {\n        this.validateListeners();\n        this.setStateDefaults();\n      })\n      .catch(e => {\n        Debugger.log('warn', e);\n      })\n      .then(() => {\n        this.container.send('loaded');\n        this.state.ready.value = true;\n      });\n\n    //register bellhop event for hints.\n    this.hints = hintPlayer;\n    this.container.on(playHelp, () => {\n      if (!this.hints) {\n        Debugger.log(\n          'warn',\n          '[Springroll] Missing IHintPlayer see: https://github.com/SpringRoll/SpringRoll/tree/v2/src/hints'\n        ); // <-- this could only happen if devs set this.hints manually.\n        return;\n      }\n\n      this.hints.play();\n    });\n  }\n\n  /**\n   * preloads, initializes and starts plugins.\n   * @return {Promise<void>}\n   * @memberof Application\n   */\n  setupPlugins() {\n    const preloads = [];\n\n    for (let i = 0; i < Application._plugins.length; i++) {\n      if (Application._plugins[i].preload) {\n        preloads.push(\n          Application._plugins[i]\n            .preload(this)\n            .catch(function preloadFail(error) {\n              Application._plugins[i].preloadFailed = true;\n              console.warn(\n                Application._plugins[i].name,\n                'Preload Failed:',\n                error\n              );\n            })\n        );\n      }\n    }\n\n    // ~wait for all preloads to resolve\n    return Promise.all(preloads).then(() => {\n      // Remove plugins that fail to load.\n      Application._plugins = Application._plugins.filter(\n        plugin => plugin.preloadFailed !== true\n      );\n\n      //init\n      for (let i = 0; i < Application._plugins.length; i++) {\n        if (!Application._plugins[i].init) {\n          continue;\n        }\n        Application._plugins[i].init(this);\n      }\n\n      //start\n      for (let i = 0; i < Application._plugins.length; i++) {\n        if (!Application._plugins[i].start) {\n          continue;\n        }\n        Application._plugins[i].start(this);\n      }\n    });\n  }\n  //test\n  /**\n   * returns instance of a plugin.\n   * @param  {string} name\n   * @return {SpringRoll.ApplicationPlugin | undefined}\n   * @memberof Application\n   * @instance\n   */\n  getPlugin(name) {\n    return Application.getPlugin(name);\n  }\n\n  /**\n   * Validates that appropriate listeners are added for the features that were enabled in the constructor\n   * @throws Error\n   */\n  validateListeners() {\n    const missingListeners = [];\n\n    const featureToStateMap = {\n      captions: captionsMuted,\n      sound: soundVolume,\n      music: musicVolume,\n      vo: voVolume,\n      sfx: sfxVolume,\n      pointerSize: pointerSize,\n      controlSensitivity: controlSensitivity,\n      buttonSize: buttonSize,\n      removableLayers: removableLayers,\n      hudPosition: hudPosition,\n      hitAreaScale: hitAreaScale,\n      dragThresholdScale: dragThresholdScale,\n      health: health,\n      objectCount: objectCount,\n      completionPercentage: completionPercentage,\n      speedScale: speedScale,\n      timersScale: timersScale,\n      inputCount: inputCount,\n      keyBinding: keyBinding,\n      colorVision: colorVision,\n      fullScreen: fullScreen,\n    };\n\n    const keys = Object.keys(featureToStateMap);\n\n    for (let i = 0; i < keys.length; i++) {\n      const stateName = featureToStateMap[keys[i]];\n\n      if (this.features[keys[i]] && !this.state[stateName].hasListeners) {\n        missingListeners.push(stateName);\n      }\n    }\n\n    if (!this.state.pause.hasListeners) {\n      missingListeners.push('pause');\n    }\n\n    if (missingListeners.length) {\n      throw new Error(\n        'Application state is missing required listeners: ' +\n          missingListeners.join(', ') +\n          '.'\n      );\n    }\n  }\n\n  /**\n   * Sets default values of application state properties.\n   */\n  setStateDefaults() {\n    Object.keys(stateDefaults).forEach(key => this.state[key].value = stateDefaults[key]);\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "config",
          "lineNumber": 1,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Root configuration object for various internal Application objects"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "default": "{}"
        },
        {
          "title": "param",
          "name": "config.hintPlayer",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "IHintPlayer application will use."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "default": "HintSequencePlayer"
        },
        {
          "title": "param",
          "name": "config.features",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A configuration object denoting which features are enabled for this application"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "default": "{}"
        },
        {
          "title": "param",
          "name": "config.features.captions",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean value denoting that this game supports captions"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.sound",
          "lineNumber": 5,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean value denoting that this game has some audio in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.vo",
          "lineNumber": 6,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has mutable voice-over audio in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.music",
          "lineNumber": 7,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has mutable music in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.sfx",
          "lineNumber": 8,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has mutable sound effects in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.soundVolume",
          "lineNumber": 9,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable sound volume in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.musicVolume",
          "lineNumber": 10,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable music volume in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.voVolume",
          "lineNumber": 11,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable voice-over volume in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.sfxVolume",
          "lineNumber": 12,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable sound effects volume in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.pointerSize",
          "lineNumber": 13,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable pointer size in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.controlSensitivity",
          "lineNumber": 14,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable control sensitivity in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.buttonSize",
          "lineNumber": 15,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable button sizes in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.removableLayers",
          "lineNumber": 16,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has removable game layers in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.hudPosition",
          "lineNumber": 17,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has custom HUD positions in it"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.hitAreaScale",
          "lineNumber": 18,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable hit areas."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.dragThresholdScale",
          "lineNumber": 19,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable drag thresholds."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.health",
          "lineNumber": 20,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable health."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.objectCount",
          "lineNumber": 21,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable object count requirements."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.completionPercentage",
          "lineNumber": 22,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable completion percentage requirements."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.speedScale",
          "lineNumber": 23,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable speed."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.timersScale",
          "lineNumber": 24,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable timers."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.inputCount",
          "lineNumber": 25,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has adjustable input count requirements."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.keyBinding",
          "lineNumber": 26,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has re-mappable key bindings."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.colorVision",
          "lineNumber": 27,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has color blindness filters."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        },
        {
          "title": "param",
          "name": "config.features.fullScreen",
          "lineNumber": 28,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A boolean denoting that this game has fullScreen capabilities"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "returns instance of a plugin."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "return",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "SpringRoll.ApplicationPlugin"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            },
            {
              "title": "memberof",
              "description": "Application",
              "lineNumber": 4
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 364,
              "column": 2
            },
            "end": {
              "line": 370,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 371,
                "column": 2
              },
              "end": {
                "line": 373,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "SpringRoll.ApplicationPlugin"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Application",
          "scope": "instance",
          "name": "getPlugin",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Application",
              "kind": "class"
            },
            {
              "name": "getPlugin",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Application#getPlugin"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Validates that appropriate listeners are added for the features that were enabled in the constructor"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "throws",
              "description": "Error",
              "lineNumber": 2,
              "type": null
            }
          ],
          "loc": {
            "start": {
              "line": 375,
              "column": 2
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 379,
                "column": 2
              },
              "end": {
                "line": 427,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Error"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "todos": [],
          "yields": [],
          "name": "validateListeners",
          "kind": "function",
          "memberof": "Application",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Application",
              "kind": "class"
            },
            {
              "name": "validateListeners",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Application#validateListeners"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets default values of application state properties."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 429,
              "column": 2
            },
            "end": {
              "line": 431,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 432,
                "column": 2
              },
              "end": {
                "line": 434,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setStateDefaults",
          "kind": "function",
          "memberof": "Application",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Application",
              "kind": "class"
            },
            {
              "name": "setStateDefaults",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Application#setStateDefaults"
        }
      ],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "preloads, initializes and starts plugins."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "return",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "void"
                  }
                ]
              }
            },
            {
              "title": "memberof",
              "description": "Application",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 314,
              "column": 2
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 319,
                "column": 2
              },
              "end": {
                "line": 362,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "void"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Application",
          "name": "setupPlugins",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Application",
              "kind": "class"
            },
            {
              "name": "setupPlugins",
              "kind": "function"
            }
          ],
          "namespace": "ApplicationsetupPlugins"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The list of plugins that are currently registered to run on Applications."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "static",
              "description": null,
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 437,
              "column": 0
            },
            "end": {
              "line": 440,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 441,
                "column": 0
              },
              "end": {
                "line": 441,
                "column": 26
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "scope": "static",
          "name": "_plugins",
          "memberof": "Application",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Application",
              "kind": "class"
            },
            {
              "name": "_plugins",
              "scope": "static"
            }
          ],
          "namespace": "Application._plugins"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Registers a plugin to be used by applications, sorting it by priority order."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The plugin to register.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "SpringRoll.ApplicationPlugin"
              },
              "name": "plugin"
            }
          ],
          "loc": {
            "start": {
              "line": 443,
              "column": 0
            },
            "end": {
              "line": 446,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 447,
                "column": 0
              },
              "end": {
                "line": 449,
                "column": 2
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "plugin",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The plugin to register."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "SpringRoll.ApplicationPlugin"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "uses",
          "kind": "function",
          "memberof": "Application",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Application",
              "kind": "class"
            },
            {
              "name": "uses",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Application.uses"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Finds a plugin by name."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The name of the plugin.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "SpringRoll.ApplicationPlugin"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            }
          ],
          "loc": {
            "start": {
              "line": 451,
              "column": 0
            },
            "end": {
              "line": 455,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 456,
                "column": 0
              },
              "end": {
                "line": 460,
                "column": 2
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The name of the plugin."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "SpringRoll.ApplicationPlugin"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "getPlugin",
          "kind": "function",
          "memberof": "Application",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Application",
              "kind": "class"
            },
            {
              "name": "getPlugin",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Application.getPlugin"
        }
      ]
    },
    "path": [
      {
        "name": "Application",
        "kind": "class"
      }
    ],
    "namespace": "Application"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "DebuggerParams"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "emitEnabled"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "enabled"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "minLevel"
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 5,
        "type": null,
        "name": "Debugger"
      },
      {
        "title": "param",
        "description": "Options",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "params"
      },
      {
        "title": "param",
        "description": "If this should emit events to the window.",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "params.emitEnabled",
        "default": "false"
      },
      {
        "title": "param",
        "description": "The starting log level for the logger.",
        "lineNumber": 8,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "UnionType",
            "elements": [
              {
                "type": "StringLiteralType",
                "value": "GENERAL"
              },
              {
                "type": "StringLiteralType",
                "value": "DEBUG"
              },
              {
                "type": "StringLiteralType",
                "value": "INFO"
              },
              {
                "type": "StringLiteralType",
                "value": "WARN"
              },
              {
                "type": "StringLiteralType",
                "value": "ERROR"
              }
            ]
          }
        },
        "name": "params.minLevel",
        "default": "'GENERAL'"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 217,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "params",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Options"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "properties": [
          {
            "title": "param",
            "name": "params.emitEnabled",
            "lineNumber": 7,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "If this should emit events to the window."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "NameExpression",
              "name": "boolean"
            },
            "default": "false"
          },
          {
            "title": "param",
            "name": "params.minLevel",
            "lineNumber": 8,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "The starting log level for the logger."
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "UnionType",
              "elements": [
                {
                  "type": "StringLiteralType",
                  "value": "GENERAL"
                },
                {
                  "type": "StringLiteralType",
                  "value": "DEBUG"
                },
                {
                  "type": "StringLiteralType",
                  "value": "INFO"
                },
                {
                  "type": "StringLiteralType",
                  "value": "WARN"
                },
                {
                  "type": "StringLiteralType",
                  "value": "ERROR"
                }
              ]
            },
            "default": "'GENERAL'"
          }
        ]
      }
    ],
    "properties": [
      {
        "title": "property",
        "name": "emitEnabled",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        }
      },
      {
        "title": "property",
        "name": "enabled",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        }
      },
      {
        "title": "property",
        "name": "minLevel",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Debugger",
    "type": {
      "type": "NameExpression",
      "name": "object"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the params of the debugger."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "DebuggerParams"
              }
            },
            {
              "title": "readonly",
              "description": null,
              "lineNumber": 3
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 4
            },
            {
              "title": "memberof",
              "description": "Debugger",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 19,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "DebuggerParams"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "readonly": true,
          "scope": "static",
          "memberof": "Debugger",
          "name": "params",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "params",
              "kind": "member",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.params"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the logging level of the debugger."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The name of the level.",
              "lineNumber": 2,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "level"
            },
            {
              "title": "return",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 29,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "level",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The name of the level."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "minLevel",
          "kind": "function",
          "memberof": "Debugger",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "minLevel",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.minLevel"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "If emitting is enabled for this instance, then it will dispatch an event on the window."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Name of the event",
              "lineNumber": 2,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "eventName",
              "default": "'Debugger'"
            }
          ],
          "loc": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 64,
                "column": 2
              },
              "end": {
                "line": 69,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "eventName",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Name of the event"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "default": "'Debugger'"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "emit",
          "kind": "function",
          "memberof": "Debugger",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "emit",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.emit"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns logging levels."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "readonly",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 4
            },
            {
              "title": "memberof",
              "description": "Debugger",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 71,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 78,
                "column": 2
              },
              "end": {
                "line": 86,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "readonly": true,
          "scope": "static",
          "memberof": "Debugger",
          "name": "LEVEL",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "LEVEL",
              "kind": "member",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.LEVEL"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Console logs all supplied arguments if the log level is low enough for them to be logged."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "minimum level for this log to run at",
              "lineNumber": 2,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "StringLiteralType",
                      "value": "log"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "general"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "warn"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "error"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "debug"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "info"
                    }
                  ]
                }
              },
              "name": "type",
              "default": "'log'"
            },
            {
              "title": "param",
              "description": "Arguments you wish to log.",
              "lineNumber": 3,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "AllLiteral"
                  }
                ]
              },
              "name": "args"
            }
          ],
          "loc": {
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 108,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 109,
                "column": 2
              },
              "end": {
                "line": 152,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "type",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "minimum level for this log to run at"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "StringLiteralType",
                    "value": "log"
                  },
                  {
                    "type": "StringLiteralType",
                    "value": "general"
                  },
                  {
                    "type": "StringLiteralType",
                    "value": "warn"
                  },
                  {
                    "type": "StringLiteralType",
                    "value": "error"
                  },
                  {
                    "type": "StringLiteralType",
                    "value": "debug"
                  },
                  {
                    "type": "StringLiteralType",
                    "value": "info"
                  }
                ]
              },
              "default": "'log'"
            },
            {
              "title": "param",
              "name": "args",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Arguments you wish to log."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "AllLiteral"
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "log",
          "kind": "function",
          "memberof": "Debugger",
          "scope": "static",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "log",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.log"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Will throw if statement is false."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "static",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "param",
              "description": "The expression to evaluate.",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "isTrue"
            }
          ],
          "loc": {
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 180,
                "column": 2
              },
              "end": {
                "line": 185,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "isTrue",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The expression to evaluate."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "scope": "static",
          "name": "assert",
          "kind": "function",
          "memberof": "Debugger",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "assert",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.assert"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns a boolean indicating if the debugger has been enabled or not."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "static",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 191,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 192,
                "column": 2
              },
              "end": {
                "line": 194,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "scope": "static",
          "name": "isEnabled",
          "kind": "function",
          "memberof": "Debugger",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "isEnabled",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.isEnabled"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Disables or enables all debugger instances.\nTODO: Remove the parameter here, and add a disable method as well"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "static",
              "description": null,
              "lineNumber": 3
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "flag"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 196,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 203,
                "column": 2
              },
              "end": {
                "line": 206,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "flag",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "scope": "static",
          "name": "enable",
          "kind": "function",
          "memberof": "Debugger",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "enable",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.enable"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the global params key."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "readonly",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "static",
              "description": null,
              "lineNumber": 3
            },
            {
              "title": "memberof",
              "description": "Debugger",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 208,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 214,
                "column": 2
              },
              "end": {
                "line": 216,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/debug/Debugger.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "readonly": true,
          "scope": "static",
          "memberof": "Debugger",
          "name": "paramKey",
          "kind": "member",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Debugger",
              "kind": "class"
            },
            {
              "name": "paramKey",
              "kind": "member",
              "scope": "static"
            }
          ],
          "namespace": "Debugger.paramKey"
        }
      ]
    },
    "path": [
      {
        "name": "Debugger",
        "kind": "class"
      }
    ],
    "namespace": "Debugger"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "HintSequencePlayer"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 69,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/HintSequencePlayer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "HintSequencePlayer",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of HintSequencePlayer."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "memberof",
          "description": "HintSequencePlayer",
          "lineNumber": 2
        }
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 2
        },
        "end": {
          "line": 13,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 14,
            "column": 2
          },
          "end": {
            "line": 18,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/HintSequencePlayer.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000134!/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js:00000001!/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/HintSequencePlayer.js 00000014",
        "code": "{\n  /**\n   * Creates an instance of HintSequencePlayer.\n   * @memberof HintSequencePlayer\n   */\n  constructor() {\n    super();\n    this.hints = [];\n    this.index = 0;\n  }\n\n  /**\n   * invokes the next hint\n   * @return {void}@memberof HintSequencePlayer\n   */\n  play() {\n    if (this.hints.length == 0) {\n      Debugger.log('warn', '[HintSequencePlayer.play()] No hints?!');\n      return;\n    }\n\n    if (this.index >= this.hints.length) {\n      this.index = 0;\n    }\n\n    this.hints[this.index]();\n    this.index++;\n  }\n\n  /**\n   * removes all hints\n   * @return {void}@memberof HintSequencePlayer\n   */\n  clear() {\n    this.index = 0;\n    this.hints.length = 0;\n  }\n\n  /**\n   * @param  {function()[]} callbacks\n   * @return {void}@memberof HintSequencePlayer\n   */\n  add(...callbacks) {\n    const length = callbacks.length;\n    for (let i = 0; i < length; i++) {\n      this.hints.push(callbacks[i]);\n    }\n  }\n\n  /**\n   * @param  {function()[]} callbacks\n   * @return {void}@memberof HintSequencePlayer\n   */\n  remove(...callbacks) {\n    const length = callbacks.length;\n    for (let i = 0; i < length; i++) {\n      this.hints = this.hints.filter(call => call !== callbacks[i]);\n\n    }\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "HintSequencePlayer"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "invokes the next hint"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "return",
              "description": "@memberof HintSequencePlayer",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 24,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/HintSequencePlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof HintSequencePlayer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "play",
          "kind": "function",
          "memberof": "HintSequencePlayer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "HintSequencePlayer",
              "kind": "class"
            },
            {
              "name": "play",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "HintSequencePlayer#play"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "removes all hints"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "return",
              "description": "@memberof HintSequencePlayer",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 42,
                "column": 2
              },
              "end": {
                "line": 45,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/HintSequencePlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof HintSequencePlayer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "clear",
          "kind": "function",
          "memberof": "HintSequencePlayer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "HintSequencePlayer",
              "kind": "class"
            },
            {
              "name": "clear",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "HintSequencePlayer#clear"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 1,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "FunctionType",
                    "params": [],
                    "result": null
                  }
                ]
              },
              "name": "callbacks"
            },
            {
              "title": "return",
              "description": "@memberof HintSequencePlayer",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 51,
                "column": 2
              },
              "end": {
                "line": 56,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/HintSequencePlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callbacks",
              "lineNumber": 1,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "FunctionType",
                    "params": [],
                    "result": null
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof HintSequencePlayer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "add",
          "kind": "function",
          "memberof": "HintSequencePlayer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "HintSequencePlayer",
              "kind": "class"
            },
            {
              "name": "add",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "HintSequencePlayer#add"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 1,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "FunctionType",
                    "params": [],
                    "result": null
                  }
                ]
              },
              "name": "callbacks"
            },
            {
              "title": "return",
              "description": "@memberof HintSequencePlayer",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 62,
                "column": 2
              },
              "end": {
                "line": 68,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/hints/HintSequencePlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callbacks",
              "lineNumber": 1,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "FunctionType",
                    "params": [],
                    "result": null
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof HintSequencePlayer"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "remove",
          "kind": "function",
          "memberof": "HintSequencePlayer",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "HintSequencePlayer",
              "kind": "class"
            },
            {
              "name": "remove",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "HintSequencePlayer#remove"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "HintSequencePlayer",
        "kind": "class"
      }
    ],
    "namespace": "HintSequencePlayer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A class for representing changeable/subscribable properties."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "Property"
      },
      {
        "title": "property",
        "description": "the value of the property",
        "lineNumber": 3,
        "type": {
          "type": "AllLiteral"
        },
        "name": "_value"
      },
      {
        "title": "property",
        "description": "all the objects listening to this property",
        "lineNumber": 4,
        "type": {
          "type": "ArrayType",
          "elements": []
        },
        "name": "listeners"
      },
      {
        "title": "property",
        "description": "Determines if the property will notify a value change regardless if it's a new value or not.",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "alwaysNotify"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 68,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "_value",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the value of the property"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "AllLiteral"
        }
      },
      {
        "title": "property",
        "name": "listeners",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "all the objects listening to this property"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "ArrayType",
          "elements": []
        }
      },
      {
        "title": "property",
        "name": "alwaysNotify",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Determines if the property will notify a value change regardless if it's a new value or not."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Property",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates a new property with an initial value."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "The initial value of this property.",
          "lineNumber": 2,
          "type": {
            "type": "AllLiteral"
          },
          "name": "initialValue"
        },
        {
          "title": "param",
          "description": "Determines if the property will notify a value change regardless if it's a new value or not.",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "boolean"
          },
          "name": "alwaysNotify"
        }
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 2
        },
        "end": {
          "line": 13,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 14,
            "column": 2
          },
          "end": {
            "line": 18,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000134!/Users/sryan/Dev/SpringRoll/SpringRoll/src/Application.js:00000002!/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js 00000014",
        "code": "{\n  /**\n   * Creates a new property with an initial value.\n   * @param {*} initialValue The initial value of this property.\n   * @param {boolean} alwaysNotify Determines if the property will notify a value change regardless if it's a new value or not.\n   */\n  constructor(initialValue, alwaysNotify = false) {\n    this._value = initialValue;\n    this.listeners = [];\n    this.alwaysNotify = alwaysNotify;\n  }\n\n  /**\n   * The current value of the property\n   * @type {*}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * Setting this value notifies all listeners of the change.\n   * @type {*}\n   */\n  set value(value) {\n    if (this.value === value && !this.alwaysNotify) {\n      return;\n    }\n\n    const prevValue = this._value;\n    this._value = value;\n\n    for (let i = 0; i < this.listeners.length; i++) {\n      this.listeners[i](this._value, prevValue);\n    }\n  }\n\n  /**\n   * Adds a subscriber to this property.\n   * @param {function} callback The callback to call whenever the property changes.\n   */\n  subscribe(callback) {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * Unsubscribes a listener from this property.\n   * @param {function} callback The callback to unsubscribe.\n   */\n  unsubscribe(callback) {\n    this.listeners = this.listeners.filter(listener => listener !== callback);\n  }\n\n  /**\n   * Whether or not this property has any subscribed listeners\n   * @readonly\n   * @type {Boolean}\n   */\n  get hasListeners() {\n    return this.listeners.length > 0;\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "initialValue",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The initial value of this property."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "AllLiteral"
          }
        },
        {
          "title": "param",
          "name": "alwaysNotify",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Determines if the property will notify a value change regardless if it's a new value or not."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "boolean"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The current value of the property"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "type",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "AllLiteral"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 24,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "type": {
            "type": "AllLiteral"
          },
          "name": "value",
          "kind": "member",
          "memberof": "Property",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Property",
              "kind": "class"
            },
            {
              "name": "value",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "Property#value"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Setting this value notifies all listeners of the change."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "type",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "AllLiteral"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 30,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 31,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "value",
              "lineNumber": 31
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "type": {
            "type": "AllLiteral"
          },
          "name": "value",
          "kind": "member",
          "memberof": "Property",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Property",
              "kind": "class"
            },
            {
              "name": "value",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "Property#value"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a subscriber to this property."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The callback to call whenever the property changes.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "function"
              },
              "name": "callback"
            }
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 48,
                "column": 2
              },
              "end": {
                "line": 50,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The callback to call whenever the property changes."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "subscribe",
          "kind": "function",
          "memberof": "Property",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Property",
              "kind": "class"
            },
            {
              "name": "subscribe",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Property#subscribe"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Unsubscribes a listener from this property."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The callback to unsubscribe.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "function"
              },
              "name": "callback"
            }
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 56,
                "column": 2
              },
              "end": {
                "line": 58,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The callback to unsubscribe."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "unsubscribe",
          "kind": "function",
          "memberof": "Property",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Property",
              "kind": "class"
            },
            {
              "name": "unsubscribe",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Property#unsubscribe"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Whether or not this property has any subscribed listeners"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "readonly",
              "description": null,
              "lineNumber": 2
            },
            {
              "title": "type",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Boolean"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 65,
                "column": 2
              },
              "end": {
                "line": 67,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/state/Property.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "readonly": true,
          "type": {
            "type": "NameExpression",
            "name": "Boolean"
          },
          "name": "hasListeners",
          "kind": "member",
          "memberof": "Property",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Property",
              "kind": "class"
            },
            {
              "name": "hasListeners",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "Property#hasListeners"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Property",
        "kind": "class"
      }
    ],
    "namespace": "Property"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": null,
        "errors": [
          "not reach to EOF"
        ],
        "name": "TimedLine"
      },
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "errors": [
          "not reach to EOF"
        ],
        "name": "IRender"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 131,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "lines",
        "lineNumber": 19
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "Caption",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Updates content based on time passed.\nThis "
                  },
                  {
                    "type": "delete",
                    "children": [
                      {
                        "type": "text",
                        "value": "should"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " be called every frame that the caption is active."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Time in seconds since last frame.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "deltaTime"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 56,
                "column": 2
              },
              "end": {
                "line": 64,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "deltaTime",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Time in seconds since last frame."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "update",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "update",
              "kind": "function"
            }
          ],
          "namespace": "Captionupdate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Handles calling callbacks and updating caption's current state."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "currentTime"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "lastTime"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 72,
                "column": 2
              },
              "end": {
                "line": 90,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "currentTime",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "title": "param",
              "name": "lastTime",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "updateState",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "updateState",
              "kind": "function"
            }
          ],
          "namespace": "CaptionupdateState"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Checks if caption has completed."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Boolean"
              }
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 97,
                "column": 2
              },
              "end": {
                "line": 99,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "isFinished",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "isFinished",
              "kind": "function"
            }
          ],
          "namespace": "CaptionisFinished"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets time and line index of caption."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Time in milliseconds.",
              "lineNumber": 3,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              },
              "name": "time",
              "default": "0"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 107,
                "column": 2
              },
              "end": {
                "line": 112,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "time",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Time in milliseconds."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "default": "0"
            },
            {
              "title": "param",
              "name": "renderer",
              "lineNumber": 107,
              "default": "{lineBegin:()=>{},lineEnd:()=>{}}"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "start",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "start",
              "kind": "function"
            }
          ],
          "namespace": "Captionstart"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Updates the current time and index of the caption instance"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              },
              "name": "time",
              "default": "0"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 118,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 119,
                "column": 2
              },
              "end": {
                "line": 130,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "time",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "default": "0"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "updateTimeIndex",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "updateTimeIndex",
              "kind": "function"
            }
          ],
          "namespace": "CaptionupdateTimeIndex"
        }
      ]
    },
    "path": [
      {
        "name": "Caption",
        "kind": "class"
      }
    ],
    "namespace": "Caption"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 1
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "Caption"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "TimedLine"
            }
          ]
        },
        "name": "lines"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "time"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "lineIndex"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "IRender"
        },
        "name": "renderer"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 131,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "lines",
        "lineNumber": 3,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "TimedLine"
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "time",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "title": "property",
        "name": "lineIndex",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "title": "property",
        "name": "renderer",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "IRender"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Caption",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of Caption."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Array of lines to be used for caption.",
          "lineNumber": 2,
          "type": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "TimedLine"
              }
            ]
          },
          "name": "lines"
        },
        {
          "title": "memberof",
          "description": "Caption",
          "lineNumber": 3
        }
      ],
      "loc": {
        "start": {
          "line": 14,
          "column": 2
        },
        "end": {
          "line": 18,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 19,
            "column": 2
          },
          "end": {
            "line": 36,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000135!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js 00000019",
        "code": "{\n  /**\n   * Creates an instance of Caption.\n   * @param {TimedLine[]} lines - Array of lines to be used for caption.\n   * @memberof Caption\n   */\n  constructor(lines) {\n    this.lines = lines;\n\n    // Sort by end time, this ensures proper execution order of lines.\n    this.lines.sort(function(a, b) {\n      if (a.endTime < b.endTime) {\n        return -1;\n      }\n\n      if (a.endTime > b.endTime) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.reset();\n  }\n\n  /**\n   * Resets time, lineIndex and content fields.\n   * @private\n   * @memberof Caption\n   */\n  reset() {\n    this.time = 0;\n    this.lineIndex = 0;\n    this.renderer = null;\n  }\n\n  /**\n   * Updates content based on time passed.\n   * This ~should~ be called every frame that the caption is active.\n   *\n   * @param {Number} deltaTime - Time in seconds since last frame.\n   * @memberof Caption\n   */\n  update(deltaTime) {\n    const time = this.time + deltaTime * 1000;\n    if (time === this.time) {\n      return;\n    }\n\n    this.updateState(time, this.time);\n    this.time = time;\n  }\n\n  /**\n   * Handles calling callbacks and updating caption's current state.\n   * @param  {Number} currentTime\n   * @param  {Number} lastTime\n   * @memberof Caption\n   */\n  updateState(currentTime, lastTime) {\n    if (this.isFinished()) {\n      return;\n    }\n    if (currentTime > this.lines[this.lineIndex].endTime) {\n      this.renderer.lineEnd();\n    }\n    while (currentTime > this.lines[this.lineIndex].endTime) {\n      if ((this.lineIndex++, this.isFinished())) {\n        return;\n      }\n    }\n\n    const line = this.lines[this.lineIndex];\n    if (currentTime >= line.startTime && lastTime <= line.startTime) {\n      this.renderer.lineBegin(line);\n      return;\n    }\n  }\n\n  /**\n   * Checks if caption has completed.\n   * @returns {Boolean}\n   * @memberof Caption\n   */\n  isFinished() {\n    return this.lineIndex >= this.lines.length;\n  }\n\n  /**\n   * Sets time and line index of caption.\n   *\n   * @param {Number} [time=0] - Time in milliseconds.\n   * @memberof Caption\n   */\n  start(time = 0, renderer = { lineBegin: () => {}, lineEnd: () => {} }) {\n    this.reset();\n    this.renderer = renderer;\n    this.updateTimeIndex(time);\n    this.updateState(this.time, this.lines[this.lineIndex].startTime - 1);\n  }\n\n  /**\n   * Updates the current time and index of the caption instance\n   * @param {Number} [time=0]\n   * @memberof Caption\n   */\n  updateTimeIndex(time = 0) {\n    this.time = time;\n    if (this.isFinished()) {\n      return;\n    }\n    for (let i = this.lines.length - 1; i > -1; i--) {\n      if (this.lines[i].startTime <= time) {\n        this.lineIndex = i;\n        break;\n      }\n    }\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "lines",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Array of lines to be used for caption."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "TimedLine"
              }
            ]
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "Caption"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Updates content based on time passed.\nThis "
                  },
                  {
                    "type": "delete",
                    "children": [
                      {
                        "type": "text",
                        "value": "should"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " be called every frame that the caption is active."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Time in seconds since last frame.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "deltaTime"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 56,
                "column": 2
              },
              "end": {
                "line": 64,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "deltaTime",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Time in seconds since last frame."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "update",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "update",
              "kind": "function"
            }
          ],
          "namespace": "Captionupdate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Handles calling callbacks and updating caption's current state."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "currentTime"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "lastTime"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 72,
                "column": 2
              },
              "end": {
                "line": 90,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "currentTime",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "title": "param",
              "name": "lastTime",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "updateState",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "updateState",
              "kind": "function"
            }
          ],
          "namespace": "CaptionupdateState"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Checks if caption has completed."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "returns",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Boolean"
              }
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 97,
                "column": 2
              },
              "end": {
                "line": 99,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "isFinished",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "isFinished",
              "kind": "function"
            }
          ],
          "namespace": "CaptionisFinished"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets time and line index of caption."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Time in milliseconds.",
              "lineNumber": 3,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              },
              "name": "time",
              "default": "0"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 107,
                "column": 2
              },
              "end": {
                "line": 112,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "time",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Time in milliseconds."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "default": "0"
            },
            {
              "title": "param",
              "name": "renderer",
              "lineNumber": 107,
              "default": "{lineBegin:()=>{},lineEnd:()=>{}}"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "start",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "start",
              "kind": "function"
            }
          ],
          "namespace": "Captionstart"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Updates the current time and index of the caption instance"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              },
              "name": "time",
              "default": "0"
            },
            {
              "title": "memberof",
              "description": "Caption",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 118,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 119,
                "column": 2
              },
              "end": {
                "line": 130,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/Caption.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "time",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "default": "0"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Caption",
          "name": "updateTimeIndex",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Caption",
              "kind": "class"
            },
            {
              "name": "updateTimeIndex",
              "kind": "function"
            }
          ],
          "namespace": "CaptionupdateTimeIndex"
        }
      ]
    },
    "path": [
      {
        "name": "Caption",
        "kind": "class"
      }
    ],
    "namespace": "Caption"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Collection of functions for creating Captions"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "CaptionFactory"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 109,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionFactory.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "CaptionFactory",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Creates a new Object<String, Caption>."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "static",
              "description": null,
              "lineNumber": 3
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "JSON"
              },
              "name": "data"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "title": "memberof",
              "description": "CaptionFactory",
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 20,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionFactory.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "data",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "JSON"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "scope": "static",
          "memberof": "CaptionFactory",
          "name": "createCaptionMap",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionFactory",
              "kind": "class"
            },
            {
              "name": "createCaptionMap",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CaptionFactory.createCaptionMap"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Creates a new Caption from JSON data."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "static",
              "description": null,
              "lineNumber": 3
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "AllLiteral"
              },
              "name": "captionData"
            },
            {
              "title": "returns",
              "description": "new Caption",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Caption"
              }
            },
            {
              "title": "memberof",
              "description": "CaptionFactory",
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 37,
              "column": 2
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 45,
                "column": 2
              },
              "end": {
                "line": 63,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionFactory.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "captionData",
              "lineNumber": 4,
              "type": {
                "type": "AllLiteral"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "new Caption"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Caption"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "scope": "static",
          "memberof": "CaptionFactory",
          "name": "createCaption",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionFactory",
              "kind": "class"
            },
            {
              "name": "createCaption",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CaptionFactory.createCaption"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Creates a new TimedLine from JSON data."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "static",
              "description": null,
              "lineNumber": 3
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "AllLiteral"
              },
              "name": "lineData"
            },
            {
              "title": "returns",
              "description": "new TimedLine;",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "TimedLine"
              }
            },
            {
              "title": "memberof",
              "description": "CaptionFactory",
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 73,
                "column": 2
              },
              "end": {
                "line": 108,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionFactory.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "lineData",
              "lineNumber": 4,
              "type": {
                "type": "AllLiteral"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "new TimedLine;"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "TimedLine"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "scope": "static",
          "memberof": "CaptionFactory",
          "name": "createLine",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionFactory",
              "kind": "class"
            },
            {
              "name": "createLine",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CaptionFactory.createLine"
        }
      ]
    },
    "path": [
      {
        "name": "CaptionFactory",
        "kind": "class"
      }
    ],
    "namespace": "CaptionFactory"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": null,
        "errors": [
          "not reach to EOF"
        ],
        "name": "IRender"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 82,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "captions",
        "lineNumber": 26
      },
      {
        "title": "param",
        "name": "renderer",
        "lineNumber": 26
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "CaptionPlayer",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Updates any currently playing caption.\nThis "
                  },
                  {
                    "type": "delete",
                    "children": [
                      {
                        "type": "text",
                        "value": "should"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " be called every frame."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Time passed in seconds since last update call.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "deltaTime"
            },
            {
              "title": "memberof",
              "description": "CaptionPlayer",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 34,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 41,
                "column": 2
              },
              "end": {
                "line": 48,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "deltaTime",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Time passed in seconds since last update call."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "CaptionPlayer",
          "name": "update",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionPlayer",
              "kind": "class"
            },
            {
              "name": "update",
              "kind": "function"
            }
          ],
          "namespace": "CaptionPlayerupdate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Starts playing a caption."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Name of caption.",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "String"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": "Atart time in milliseconds.",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "time",
              "default": "0"
            },
            {
              "title": "param",
              "description": "Arguments that will get passed to the renderer",
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "args",
              "default": "{}"
            },
            {
              "title": "memberof",
              "description": "CaptionPlayer",
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 58,
                "column": 2
              },
              "end": {
                "line": 68,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Name of caption."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "String"
              }
            },
            {
              "title": "param",
              "name": "time",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Atart time in milliseconds."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "default": "0"
            },
            {
              "title": "param",
              "name": "args",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Arguments that will get passed to the renderer"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "CaptionPlayer",
          "name": "start",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionPlayer",
              "kind": "class"
            },
            {
              "name": "start",
              "kind": "function"
            }
          ],
          "namespace": "CaptionPlayerstart"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Stops any caption currently playing."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "CaptionPlayer",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 73,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 74,
                "column": 2
              },
              "end": {
                "line": 81,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "CaptionPlayer",
          "name": "stop",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionPlayer",
              "kind": "class"
            },
            {
              "name": "stop",
              "kind": "function"
            }
          ],
          "namespace": "CaptionPlayerstop"
        }
      ]
    },
    "path": [
      {
        "name": "CaptionPlayer",
        "kind": "class"
      }
    ],
    "namespace": "CaptionPlayer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "CaptionPlayer is used to start, stop and update captions.\nIt applies the content of an active caption to a given CaptionRenderer."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 4
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 5,
        "type": null,
        "name": "CaptionPlayer",
        "errors": [
          "Unknown content '/*'"
        ]
      },
      {
        "title": "export",
        "description": null,
        "lineNumber": 8
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 9,
        "type": null,
        "name": "CaptionPlayer"
      }
    ],
    "loc": {
      "start": {
        "line": 8,
        "column": 0
      },
      "end": {
        "line": 18,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 82,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "CaptionPlayer",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of CaptionPlayer."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Captions map.",
          "lineNumber": 2,
          "type": {
            "type": "AllLiteral"
          },
          "name": "captions"
        },
        {
          "title": "param",
          "description": "CaptionRenderer that content is applied to.",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "IRender"
          },
          "name": "renderer"
        },
        {
          "title": "memberof",
          "description": "CaptionPlayer",
          "lineNumber": 4
        }
      ],
      "loc": {
        "start": {
          "line": 20,
          "column": 2
        },
        "end": {
          "line": 25,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 26,
            "column": 2
          },
          "end": {
            "line": 32,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000135!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/index.js:00000002!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js 00000026",
        "code": "{\n  /**\n   * Creates an instance of CaptionPlayer.\n   * @param {*} captions - Captions map.\n   * @param {IRender} renderer CaptionRenderer that content is applied to.\n   * @memberof CaptionPlayer\n   */\n  constructor(captions, renderer) {\n    this.captions = CaptionFactory.createCaptionMap(captions);\n\n    this.renderer = renderer;\n\n    this.activeCaption = null;\n  }\n\n  /**\n   * Updates any currently playing caption.\n   * This ~should~ be called every frame.\n   *\n   * @param {Number} deltaTime Time passed in seconds since last update call.\n   * @memberof CaptionPlayer\n   */\n  update(deltaTime) {\n    if (this.activeCaption) {\n      this.activeCaption.update(deltaTime);\n      if (this.activeCaption.isFinished()) {\n        this.stop();\n      }\n    }\n  }\n\n  /**\n   * Starts playing a caption.\n   *\n   * @param {String} name Name of caption.\n   * @param {number} [time=0] Atart time in milliseconds.\n   * @param {object} [args = {}] Arguments that will get passed to the renderer\n   * @memberof CaptionPlayer\n   */\n  start(name, time = 0, args = {}) {\n    this.stop();\n    this.activeCaption = this.captions[name];\n    if (this.activeCaption) {\n      this.renderer.start(args);\n      this.activeCaption.start(time, this.renderer);\n      return;\n    }\n\n    Debugger.log('warn', `[CaptionPlayer.Start()] caption ${name} not found`);\n  }\n\n  /**\n   * Stops any caption currently playing.\n   * @memberof CaptionPlayer\n   */\n  stop() {\n    if (this.activeCaption) {\n      if (this.renderer.stop) {\n        this.renderer.stop();\n      }\n    }\n    this.activeCaption = null;\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "captions",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Captions map."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "AllLiteral"
          }
        },
        {
          "title": "param",
          "name": "renderer",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "CaptionRenderer that content is applied to."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "IRender"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "CaptionPlayer"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Updates any currently playing caption.\nThis "
                  },
                  {
                    "type": "delete",
                    "children": [
                      {
                        "type": "text",
                        "value": "should"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " be called every frame."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Time passed in seconds since last update call.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "deltaTime"
            },
            {
              "title": "memberof",
              "description": "CaptionPlayer",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 34,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 41,
                "column": 2
              },
              "end": {
                "line": 48,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "deltaTime",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Time passed in seconds since last update call."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "CaptionPlayer",
          "name": "update",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionPlayer",
              "kind": "class"
            },
            {
              "name": "update",
              "kind": "function"
            }
          ],
          "namespace": "CaptionPlayerupdate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Starts playing a caption."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Name of caption.",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "String"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": "Atart time in milliseconds.",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "time",
              "default": "0"
            },
            {
              "title": "param",
              "description": "Arguments that will get passed to the renderer",
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "args",
              "default": "{}"
            },
            {
              "title": "memberof",
              "description": "CaptionPlayer",
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 58,
                "column": 2
              },
              "end": {
                "line": 68,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Name of caption."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "String"
              }
            },
            {
              "title": "param",
              "name": "time",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Atart time in milliseconds."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "default": "0"
            },
            {
              "title": "param",
              "name": "args",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Arguments that will get passed to the renderer"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "CaptionPlayer",
          "name": "start",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionPlayer",
              "kind": "class"
            },
            {
              "name": "start",
              "kind": "function"
            }
          ],
          "namespace": "CaptionPlayerstart"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Stops any caption currently playing."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "CaptionPlayer",
              "lineNumber": 2
            }
          ],
          "loc": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 73,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 74,
                "column": 2
              },
              "end": {
                "line": 81,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/CaptionPlayer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "CaptionPlayer",
          "name": "stop",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "CaptionPlayer",
              "kind": "class"
            },
            {
              "name": "stop",
              "kind": "function"
            }
          ],
          "namespace": "CaptionPlayerstop"
        }
      ]
    },
    "path": [
      {
        "name": "CaptionPlayer",
        "kind": "class"
      }
    ],
    "namespace": "CaptionPlayer"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 1
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "startTime"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "endTime"
      },
      {
        "title": "property",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "content"
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 5,
        "type": null,
        "name": "TimedLine"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/TimedLine.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "startTime",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "title": "property",
        "name": "endTime",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "title": "property",
        "name": "content",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "TimedLine",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of TimedLine."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "Start time in milliseconds relative to caption.",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "Number"
          },
          "name": "startTime"
        },
        {
          "title": "param",
          "description": "End time in milliseconds relative to caption.",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "Number"
          },
          "name": "endTime"
        },
        {
          "title": "param",
          "description": "HMTL formatted string content to show during time-span.",
          "lineNumber": 4,
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "name": "content"
        },
        {
          "title": "memberof",
          "description": "TimedLine",
          "lineNumber": 5
        }
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 2
        },
        "end": {
          "line": 15,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 16,
            "column": 2
          },
          "end": {
            "line": 21,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/TimedLine.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000135!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/index.js:00000003!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/TimedLine.js 00000016",
        "code": "{\n  /**\n   * Creates an instance of TimedLine.\n   * @param {Number} startTime - Start time in milliseconds relative to caption.\n   * @param {Number} endTime - End time in milliseconds relative to caption.\n   * @param {string} content - HMTL formatted string content to show during time-span.\n   * @memberof TimedLine\n   */\n  constructor(startTime, endTime, content) {\n    this.startTime = startTime || 0;\n    this.endTime = endTime || 0;\n    this.content = '';\n    this.setContent(content);\n  }\n\n  /**\n   * Sets line's content. Removes HTML formatting for text.\n   * @param  {any} content\n   * @return {void}@memberof TimedLine\n   */\n  setContent(content) {\n    this.content = content;\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "startTime",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Start time in milliseconds relative to caption."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "title": "param",
          "name": "endTime",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "End time in milliseconds relative to caption."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        {
          "title": "param",
          "name": "content",
          "lineNumber": 4,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "HMTL formatted string content to show during time-span."
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "TimedLine"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets line's content. Removes HTML formatting for text."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "content"
            },
            {
              "title": "return",
              "description": "@memberof TimedLine",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/TimedLine.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "content",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "any"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "@memberof TimedLine"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "void"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setContent",
          "kind": "function",
          "memberof": "TimedLine",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "TimedLine",
              "kind": "class"
            },
            {
              "name": "setContent",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "TimedLine#setContent"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "TimedLine",
        "kind": "class"
      }
    ],
    "namespace": "TimedLine"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Render interface to help enforce minimum requirements for caption renderers"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "interface",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "IRender"
      },
      {
        "title": "property",
        "description": "called when the Caption Player starts playing captions",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "start"
      },
      {
        "title": "property",
        "description": "called when the Caption Player stops playing captions",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "stop"
      },
      {
        "title": "property",
        "description": "called when rendering a new line of text",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "lineBegin"
      },
      {
        "title": "property",
        "description": "called when finished rendering a new of text",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "lineEnd"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/IRenderer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "start",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "called when the Caption Player starts playing captions"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "title": "property",
        "name": "stop",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "called when the Caption Player stops playing captions"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "title": "property",
        "name": "lineBegin",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "called when rendering a new line of text"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "title": "property",
        "name": "lineEnd",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "called when finished rendering a new of text"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "IRender",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of Renderer."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "memberof",
          "description": "Renderer",
          "lineNumber": 2
        }
      ],
      "loc": {
        "start": {
          "line": 11,
          "column": 2
        },
        "end": {
          "line": 14,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 15,
            "column": 2
          },
          "end": {
            "line": 26,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/IRenderer.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000135!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/index.js:00000004!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/IRenderer.js 00000015",
        "code": "{\n  /**\n   *Creates an instance of Renderer.\n   * @memberof Renderer\n   */\n  constructor() {\n    if (\n      'function' !== typeof this.start ||\n      'function' !== typeof this.stop ||\n      'function' !== typeof this.lineBegin ||\n      'function' !== typeof this.lineEnd\n    ) {\n      console.error(\n        'Springroll Caption Renderer not implemented corrected. Please ensure you have a \"start\", \"end\", \"lineBegin\", and \"lineEnd\" function in your class.'\n      );\n    }\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "Renderer"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "IRender",
        "kind": "class"
      }
    ],
    "namespace": "IRender"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "DOMRender is a incomplete renderer that is intended to supply just the basic start and stop functions"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "DOMRenderer"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "HTMLElement"
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "templateVariables"
      }
    ],
    "loc": {
      "start": {
        "line": 2,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 44,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererDOM.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "element",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "HTMLElement"
        }
      },
      {
        "title": "param",
        "name": "templateVariables",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "DOMRenderer",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of DOMRenderer."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "memberof",
          "description": "DOMRenderer",
          "lineNumber": 2
        }
      ],
      "loc": {
        "start": {
          "line": 11,
          "column": 2
        },
        "end": {
          "line": 14,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 15,
            "column": 2
          },
          "end": {
            "line": 24,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererDOM.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000135!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/index.js:00000004!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/index.js:00000001!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererDOM.js 00000015",
        "code": "{\n  /**\n   *Creates an instance of DOMRenderer.\n   * @memberof DOMRenderer\n   */\n  constructor(element, templateVariables = {}) {\n    super();\n\n    if (!(element instanceof HTMLElement)) {\n      console.error('Invalid html element provided to renderer');\n    }\n\n    this.renderTarget = element;\n    this.templateVariables = templateVariables;\n  }\n  /**\n   * Makes target element visible and ready to present captions\n   * @param {object} [templateVariables = {}] Variables that can used during caption play time\n   * @memberof DOMRenderer\n   */\n  start(templateVariables = {}) {\n    this.renderTarget.style.visibility = 'visible';\n    this.templateVariables = templateVariables;\n  }\n\n  /**\n   *\n   * H\n   * @memberof DOMRenderer\n   */\n  stop() {\n    this.renderTarget.style.visibility = 'hidden';\n    this.templateVariables = {};\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "DOMRenderer"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Makes target element visible and ready to present captions"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Variables that can used during caption play time",
              "lineNumber": 2,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "templateVariables",
              "default": "{}"
            },
            {
              "title": "memberof",
              "description": "DOMRenderer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 25,
              "column": 2
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererDOM.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "templateVariables",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Variables that can used during caption play time"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "DOMRenderer",
          "name": "start",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "DOMRenderer",
              "kind": "class"
            },
            {
              "name": "start",
              "kind": "function"
            }
          ],
          "namespace": "DOMRendererstart"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "H"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "DOMRenderer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 35,
              "column": 2
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 40,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererDOM.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "DOMRenderer",
          "name": "stop",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "DOMRenderer",
              "kind": "class"
            },
            {
              "name": "stop",
              "kind": "function"
            }
          ],
          "namespace": "DOMRendererstop"
        }
      ]
    },
    "path": [
      {
        "name": "DOMRenderer",
        "kind": "class"
      }
    ],
    "namespace": "DOMRenderer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "HTML Renderer is intended for rendering raw html in the use case of wanting to display styled captions"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "HtmlRenderer"
      },
      {
        "title": "implements",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "RendererInterface"
        },
        "name": "RendererInterface"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererHTML.js"
    },
    "augments": [],
    "examples": [],
    "implements": [
      {
        "title": "implements",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "RendererInterface"
        },
        "name": "RendererInterface"
      }
    ],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "HtmlRenderer",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Called by Caption Player when a new line needs to be displayed"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "HtmlRenderer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 15,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererHTML.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "line",
              "lineNumber": 16
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "HtmlRenderer",
          "name": "lineBegin",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "HtmlRenderer",
              "kind": "class"
            },
            {
              "name": "lineBegin",
              "kind": "function"
            }
          ],
          "namespace": "HtmlRendererlineBegin"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Called by Caption Player when a line is complete"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "HtmlRenderer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererHTML.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "HtmlRenderer",
          "name": "lineEnd",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "HtmlRenderer",
              "kind": "class"
            },
            {
              "name": "lineEnd",
              "kind": "function"
            }
          ],
          "namespace": "HtmlRendererlineEnd"
        }
      ]
    },
    "path": [
      {
        "name": "HtmlRenderer",
        "kind": "class"
      }
    ],
    "namespace": "HtmlRenderer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "TemplateRenderer accepts a string template e.g."
            },
            {
              "type": "inlineCode",
              "value": "The ball is {{color}}"
            },
            {
              "type": "text",
              "value": " and a args object e.g. "
            },
            {
              "type": "inlineCode",
              "value": "{color: 'red'}"
            },
            {
              "type": "text",
              "value": "\nand swaps out the placeholder inside the double brackets with the matching key inside the args object"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "String template that will be rendered with the supplied arguments",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "template"
      },
      {
        "title": "param",
        "description": "//An Object contain data to be inserted into the template This will match based on key values",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "args"
      },
      {
        "title": "returns",
        "description": null,
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererTemplate.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "template",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "String template that will be rendered with the supplied arguments"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "args",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "//An Object contain data to be inserted into the template This will match based on key values"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": []
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "TemplateRenderer",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "TemplateRenderer",
        "kind": "class"
      }
    ],
    "namespace": "TemplateRenderer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "TextRenderer is intended for just rendering test. It will attempt to sanitize any strings passed to it by removing html syntax"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "TextRenderer"
      },
      {
        "title": "implements",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "RendererInterface"
        },
        "name": "RendererInterface"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 42,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererText.js"
    },
    "augments": [],
    "examples": [],
    "implements": [
      {
        "title": "implements",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "RendererInterface"
        },
        "name": "RendererInterface"
      }
    ],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "TextRenderer",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Called by Caption Player when a new line needs to be displayed"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "TextRenderer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 15,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererText.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "line",
              "lineNumber": 16
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "TextRenderer",
          "name": "lineBegin",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "TextRenderer",
              "kind": "class"
            },
            {
              "name": "lineBegin",
              "kind": "function"
            }
          ],
          "namespace": "TextRendererlineBegin"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Called by Caption Player when a line is complete"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "TextRenderer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 22,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 27,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererText.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "TextRenderer",
          "name": "lineEnd",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "TextRenderer",
              "kind": "class"
            },
            {
              "name": "lineEnd",
              "kind": "function"
            }
          ],
          "namespace": "TextRendererlineEnd"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Will attempt to remove all html from a string before it's renderer to the page"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "AllLiteral"
              },
              "name": "html"
            },
            {
              "title": "memberof",
              "description": "TextRenderer",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 31,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 37,
                "column": 2
              },
              "end": {
                "line": 41,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/captions/renderers/RendererText.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "html",
              "lineNumber": 3,
              "type": {
                "type": "AllLiteral"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "TextRenderer",
          "name": "sanitize",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "TextRenderer",
              "kind": "class"
            },
            {
              "name": "sanitize",
              "kind": "function"
            }
          ],
          "namespace": "TextRenderersanitize"
        }
      ]
    },
    "path": [
      {
        "name": "TextRenderer",
        "kind": "class"
      }
    ],
    "namespace": "TextRenderer"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 1,
        "type": {
          "type": "RecordType",
          "fields": [
            {
              "type": "FieldType",
              "key": "path",
              "value": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "name": "Locale"
      },
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "RecordType",
          "fields": [
            {
              "type": "FieldType",
              "key": "default",
              "value": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "type": "FieldType",
              "key": "locales",
              "value": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "name",
                    "value": {
                      "type": "NameExpression",
                      "name": "Locale"
                    }
                  }
                ]
              }
            }
          ]
        },
        "name": "Localizer.Config"
      },
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "RecordType",
          "fields": [
            {
              "type": "FieldType",
              "key": "language",
              "value": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "type": "FieldType",
              "key": "fallback",
              "value": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "name": "Localizer.Options"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 134,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "Localizer.Options",
    "type": {
      "type": "RecordType",
      "fields": [
        {
          "type": "FieldType",
          "key": "language",
          "value": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        {
          "type": "FieldType",
          "key": "fallback",
          "value": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Localizer.Options",
        "kind": "typedef"
      }
    ],
    "namespace": "Localizer.Options"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "export",
        "description": null,
        "lineNumber": 1
      },
      {
        "title": "class",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "Localizer"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 134,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "Localizer",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates an instance of Localizer."
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": null,
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "Localizer.Config"
          },
          "name": "config"
        },
        {
          "title": "param",
          "description": null,
          "lineNumber": 3,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "Localizer.Options"
            }
          },
          "name": "options",
          "default": "{}"
        },
        {
          "title": "memberof",
          "description": "Localizer",
          "lineNumber": 4
        }
      ],
      "loc": {
        "start": {
          "line": 12,
          "column": 2
        },
        "end": {
          "line": 17,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 18,
            "column": 2
          },
          "end": {
            "line": 25,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000135!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/index.js:00000001!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js 00000018",
        "code": "{\n  /**\n   * Creates an instance of Localizer.\n   * @param {Localizer.Config} config\n   * @param {Localizer.Options} [options={}]\n   * @memberof Localizer\n   */\n  constructor(config, options = {}) {\n    this.locales = config.locales;\n\n    this.setPrimaryLocale(\n      options.language || this.getBrowsersLocaleKey() || config.default\n    );\n    this.setFallbackLocale(options.fallback || config.default);\n  }\n\n  /**\n   *\n   * @param  {string} path\n   * @param  {any} [options={}]\n   * @return {{path: string, language: string}}\n   * @memberof Localizer\n   */\n  resolve(path, options = {}) {\n    const language = options.language\n      ? this.getLocaleKey(options.language)\n      : this.primaryLanguage;\n    const fallback =\n      this.getLocaleKey(options.fallback) || this.fallbackLanguage;\n\n    const primaryLocale = this.locales[language];\n    const fallbackLocale = this.locales[fallback];\n\n    if (primaryLocale) {\n      return { path: primaryLocale.path + path, language: language };\n    }\n\n    if (fallbackLocale) {\n      return { path: fallbackLocale.path + path, language: fallback };\n    }\n  }\n\n  /**\n   * @param  {string} localeKey\n   * @return {boolean} True if language is set.\n   * @memberof Localizer\n   */\n  setPrimaryLocale(localeKey) {\n    const key = this.getLocaleKey(localeKey);\n    if (key) {\n      this.primaryLanguage = key;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @param  {string} localeKey\n   * @return {boolean} True if fallback is set.\n   * @memberof Localizer\n   */\n  setFallbackLocale(localeKey) {\n    const key = this.getLocaleKey(localeKey);\n    if (key) {\n      this.fallbackLanguage = key;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param  {string} localeKey\n   * @return {string}\n   * @memberof Localizer\n   */\n  getLocaleKey(localeKey) {\n    if (localeKey) {\n      let key = localeKey.toLowerCase();\n      if (this.locales[key]) {\n        return key;\n      }\n\n      if (key.indexOf('-') > 0) {\n        key = key.split('-')[0];\n        return this.getLocaleKey(key);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @private\n   * @return {void | string}\n   * @memberof Localizer\n   */\n  getBrowsersLocaleKey() {\n    const browserLanguages = this.getBrowserLanguages();\n    for (let i = 0, length = browserLanguages.length; i < length; i++) {\n      const key = this.getLocaleKey(browserLanguages[i]);\n      if (key) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   *\n   * @return {ReadonlyArray[*] | []} An array of browser languages.\n   * @memberof Localizer\n   */\n  getBrowserLanguages() {\n    if (navigator.languages) {\n      return navigator.languages;\n    }\n\n    if (navigator.language) {\n      return [navigator.language || navigator.userLanguage];\n    }\n\n    return [];\n  }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "config",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "Localizer.Config"
          }
        },
        {
          "title": "param",
          "name": "options",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "Localizer.Options"
          },
          "default": "{}"
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": [],
      "memberof": "Localizer"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "any"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "return",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "path",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "language",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            {
              "title": "memberof",
              "description": "Localizer",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 51,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "path",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "path",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "language",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Localizer",
          "name": "resolve",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Localizer",
              "kind": "class"
            },
            {
              "name": "resolve",
              "kind": "function"
            }
          ],
          "namespace": "Localizerresolve"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "localeKey"
            },
            {
              "title": "return",
              "description": "True if language is set.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "memberof",
              "description": "Localizer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 53,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 58,
                "column": 2
              },
              "end": {
                "line": 65,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "localeKey",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "True if language is set."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Localizer",
          "name": "setPrimaryLocale",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Localizer",
              "kind": "class"
            },
            {
              "name": "setPrimaryLocale",
              "kind": "function"
            }
          ],
          "namespace": "LocalizersetPrimaryLocale"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "localeKey"
            },
            {
              "title": "return",
              "description": "True if fallback is set.",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "memberof",
              "description": "Localizer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 72,
                "column": 2
              },
              "end": {
                "line": 79,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "localeKey",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "True if fallback is set."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Localizer",
          "name": "setFallbackLocale",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Localizer",
              "kind": "class"
            },
            {
              "name": "setFallbackLocale",
              "kind": "function"
            }
          ],
          "namespace": "LocalizersetFallbackLocale"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "localeKey"
            },
            {
              "title": "return",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "memberof",
              "description": "Localizer",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 81,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 87,
                "column": 2
              },
              "end": {
                "line": 100,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "localeKey",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Localizer",
          "name": "getLocaleKey",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Localizer",
              "kind": "class"
            },
            {
              "name": "getLocaleKey",
              "kind": "function"
            }
          ],
          "namespace": "LocalizergetLocaleKey"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "return",
              "description": "An array of browser languages.",
              "lineNumber": 2,
              "type": null,
              "errors": [
                "expected an array-style type declaration (ReadonlyArray[])"
              ]
            },
            {
              "title": "memberof",
              "description": "Localizer",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 123,
                "column": 2
              },
              "end": {
                "line": 133,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/localization/localizer/Localizer.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "Localizer",
          "name": "getBrowserLanguages",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Localizer",
              "kind": "class"
            },
            {
              "name": "getBrowserLanguages",
              "kind": "function"
            }
          ],
          "namespace": "LocalizergetBrowserLanguages"
        }
      ]
    },
    "path": [
      {
        "name": "Localizer",
        "kind": "class"
      }
    ],
    "namespace": "Localizer"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Represents a single plugin for applications. Allows developers to inject code in the start up process of an\napplication providing new features to the application."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "ApplicationPlugin"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 1
        }
      },
      "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/plugins/ApplicationPlugin.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "class",
    "name": "ApplicationPlugin",
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates a new Application plugin with a given name and other required plugins"
              }
            ]
          }
        ]
      },
      "tags": [
        {
          "title": "param",
          "description": "The configuration options to the plugin",
          "lineNumber": 2,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "Object"
            }
          },
          "name": "options",
          "default": "{}"
        },
        {
          "title": "param",
          "description": "The name of the plugin. Used by other plugins to specify a dependency on the plugin",
          "lineNumber": 3,
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "String"
            }
          },
          "name": "options.name"
        }
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 2
        },
        "end": {
          "line": 11,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 18,
            "column": 3
          }
        },
        "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/plugins/ApplicationPlugin.js",
        "sortKey": "!/Users/sryan/Dev/SpringRoll/SpringRoll/src/index.js:00000136!/Users/sryan/Dev/SpringRoll/SpringRoll/src/plugins/index.js:00000000!/Users/sryan/Dev/SpringRoll/SpringRoll/src/plugins/ApplicationPlugin.js 00000012",
        "code": "{\n  /**\n   * Creates a new Application plugin with a given name and other required plugins\n   * @param {Object} [options={}] The configuration options to the plugin\n   * @param {String} [options.name] The name of the plugin. Used by other plugins to specify a dependency on the plugin\n   */\n  constructor(options = {}) {\n    if (options.name === undefined) {\n      throw new Error('Application plugin not provided a name field');\n    }\n\n    this.name = options.name;\n  }\n\n  /**\n   * A preload method for the plugin which allows for asynchronous setup tasks. Either takes a callback as first\n   * parameter, or should return a Promise indicating that loading is finished.\n   * @return {Promise} A promise indicating when the plugin is finished loading.\n   */\n  preload() {\n    return Promise.resolve();\n  }\n\n  /**\n   * An init method for the plugin. This method is ran synchronously in the constructor of the Application.\n   * After all plugins preloads  has completed\n   */\n  init() {}\n\n  /**\n   * A start method for the plugin. This method is ran synchronously in the constructor of the Application.\n   * After all plugins inits has completed\n   */\n  start() {}\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "options",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The configuration options to the plugin"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "default": "{}"
        },
        {
          "title": "param",
          "name": "options.name",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The name of the plugin. Used by other plugins to specify a dependency on the plugin"
                  }
                ]
              }
            ]
          },
          "type": {
            "type": "OptionalType",
            "expression": {
              "type": "NameExpression",
              "name": "String"
            }
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A preload method for the plugin which allows for asynchronous setup tasks. Either takes a callback as first\nparameter, or should return a Promise indicating that loading is finished."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "return",
              "description": "A promise indicating when the plugin is finished loading.",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 25,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 3
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/plugins/ApplicationPlugin.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A promise indicating when the plugin is finished loading."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "preload",
          "kind": "function",
          "memberof": "ApplicationPlugin",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ApplicationPlugin",
              "kind": "class"
            },
            {
              "name": "preload",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "ApplicationPlugin#preload"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "An init method for the plugin. This method is ran synchronously in the constructor of the Application.\nAfter all plugins preloads  has completed"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 33,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 11
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/plugins/ApplicationPlugin.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "init",
          "kind": "function",
          "memberof": "ApplicationPlugin",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ApplicationPlugin",
              "kind": "class"
            },
            {
              "name": "init",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "ApplicationPlugin#init"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A start method for the plugin. This method is ran synchronously in the constructor of the Application.\nAfter all plugins inits has completed"
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 35,
              "column": 2
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 39,
                "column": 2
              },
              "end": {
                "line": 39,
                "column": 12
              }
            },
            "file": "/Users/sryan/Dev/SpringRoll/SpringRoll/src/plugins/ApplicationPlugin.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "start",
          "kind": "function",
          "memberof": "ApplicationPlugin",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "ApplicationPlugin",
              "kind": "class"
            },
            {
              "name": "start",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "ApplicationPlugin#start"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "ApplicationPlugin",
        "kind": "class"
      }
    ],
    "namespace": "ApplicationPlugin"
  }
]